/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/Meta/Modes": {
    /** Gets a list of all of the available journey planner modes */
    get: operations["Journey_Meta"];
  };
  "/JourneyResults/{from}/to/{to}": {
    /** Perform a Journey Planner search from the parameters specified in simple types */
    get: operations["Journey_JourneyResultsByPathFromPathToQueryViaQueryNationalSearchQueryDateQu"];
  };
  "/*": {
    /** Forwards any remaining requests to the back-end */
    get: operations["Forward_Proxy"];
  };
}

export interface components {
  schemas: {
    Tfl: {
      isTflService: boolean;
      isFarePaying: boolean;
      isScheduledService: boolean;
      modeName: string;
    };
    "Tfl-2": {
      name: string;
      value: string;
    };
    "Tfl-3": {
      description: string;
      turnDirection: string;
      streetName: string;
      /** Format: int32 */
      distance: number;
      /** Format: int32 */
      cumulativeDistance: number;
      /** Format: int32 */
      skyDirection: number;
      /** @enum {string} */
      skyDirectionDescription:
        | "North"
        | "NorthEast"
        | "East"
        | "SouthEast"
        | "South"
        | "SouthWest"
        | "West"
        | "NorthWest";
      /** Format: int32 */
      cumulativeTravelTime: number;
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      pathAttribute: components["schemas"]["Tfl-2"];
      descriptionHeading: string;
      /** @enum {string} */
      trackType:
        | "CycleSuperHighway"
        | "CanalTowpath"
        | "QuietRoad"
        | "ProvisionForCyclists"
        | "BusyRoads"
        | "None"
        | "PushBike"
        | "Quietway";
    };
    "Tfl-4": {
      summary: string;
      detailed: string;
      steps: components["schemas"]["Tfl-3"][];
    };
    "Tfl-5": {
      type: string;
      incline: string;
      /** Format: int32 */
      stopId: number;
      position: string;
    };
    /** @description Represents a point located at a latitude and longitude using the WGS84 co-ordinate system. */
    "Tfl-6": {
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl-7": {
      /** @description Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc. */
      timeSlice: string;
      /**
       * Format: int32
       * @description Count of passenger flow towards a platform
       */
      value: number;
    };
    "Tfl-8": {
      /** @description The Line Name e.g. "Victoria" */
      line: string;
      /** @description Direction of the Line e.g. NB, SB, WB etc. */
      lineDirection: string;
      /** @description Direction displayed on the platform e.g. NB, SB, WB etc. */
      platformDirection: string;
      /** @description Direction in regards to Journey Planner i.e. inbound or outbound */
      direction: string;
      /** @description Naptan of the adjacent station */
      naptanTo: string;
      /** @description Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc. */
      timeSlice: string;
      /**
       * Format: int32
       * @description Scale between 1-6,
       *              1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy
       */
      value: number;
    };
    "Tfl-9": {
      /** @description Busiest times at a station (static information) */
      passengerFlows: components["schemas"]["Tfl-7"][];
      /** @description Train Loading on a scale 1-6, 1 being "Very quiet" and 6 being "Exceptionally busy" (static information) */
      trainLoadings: components["schemas"]["Tfl-8"][];
    };
    "Tfl-10": {
      id: string;
      name: string;
      uri: string;
      fullName: string;
      type: string;
      crowding: components["schemas"]["Tfl-9"];
      /** @enum {string} */
      routeType:
        | "Unknown"
        | "All"
        | "Cycle Superhighways"
        | "Quietways"
        | "Cycleways"
        | "Mini-Hollands"
        | "Central London Grid"
        | "Streetspace Route";
      /** @enum {string} */
      status:
        | "Unknown"
        | "All"
        | "Open"
        | "In Progress"
        | "Planned"
        | "Planned - Subject to feasibility and consultation."
        | "Not Open";
    };
    "Tfl-11": {
      /** Format: int32 */
      distance: number;
      /** Format: double */
      startLat: number;
      /** Format: double */
      startLon: number;
      /** Format: double */
      endLat: number;
      /** Format: double */
      endLon: number;
      /** Format: int32 */
      heightFromPreviousPoint: number;
      /** Format: double */
      gradient: number;
    };
    "Tfl-12": {
      lineString: string;
      stopPoints: components["schemas"]["Tfl-10"][];
      elevation: components["schemas"]["Tfl-11"][];
    };
    "Tfl-13": {
      /** @description The Id of the route */
      id: string;
      /** @description Name such as "72" */
      name: string;
      directions: string[];
      lineIdentifier: components["schemas"]["Tfl-10"];
    };
    "Tfl-14": {
      naptanIdReference: string;
      stationAtcoCode: string;
      lineIdentifier: string[];
    };
    "Tfl-15": {
      modeName: string;
      lineIdentifier: string[];
    };
    "Tfl-16": {
      category: string;
      key: string;
      sourceSystemKey: string;
      value: string;
      /** Format: date-time */
      modified: string;
    };
    "Tfl-17": {
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl-16"][];
      children: components["schemas"]["Tfl-17"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl-18": {
      naptanId: string;
      platformName: string;
      /** @description The indicator of the stop point e.g. "Stop K" */
      indicator: string;
      /** @description The stop letter, if it could be cleansed from the Indicator e.g. "K" */
      stopLetter: string;
      modes: string[];
      icsCode: string;
      smsCode: string;
      stopType: string;
      stationNaptan: string;
      accessibilitySummary: string;
      hubNaptanCode: string;
      lines: components["schemas"]["Tfl-10"][];
      lineGroup: components["schemas"]["Tfl-14"][];
      lineModeGroups: components["schemas"]["Tfl-15"][];
      fullName: string;
      naptanMode: string;
      status: boolean;
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl-16"][];
      children: components["schemas"]["Tfl-17"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl-19": {
      /** Format: int32 */
      ordinal: number;
      stopPoint: components["schemas"]["Tfl-18"];
    };
    "Tfl-20": {
      /** @description The Id of the route */
      id: string;
      /** @description The Id of the Line */
      lineId: string;
      /** @description The route code */
      routeCode: string;
      /** @description Name such as "72" */
      name: string;
      /** @description The co-ordinates of the route's path as a geoJSON lineString */
      lineString: string;
      /** @description Inbound or Outbound */
      direction: string;
      /** @description The name of the Origin StopPoint */
      originationName: string;
      /** @description The name of the Destination StopPoint */
      destinationName: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid until.
       */
      validTo: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid from.
       */
      validFrom: string;
      routeSectionNaptanEntrySequence: components["schemas"]["Tfl-19"][];
    };
    /** @description Represents a disruption to a route within the transport network. */
    "Tfl-21": {
      /**
       * @description Gets or sets the category of this dispruption.
       * @enum {string}
       */
      category:
        | "Undefined"
        | "RealTime"
        | "PlannedWork"
        | "Information"
        | "Event"
        | "Crowding"
        | "StatusAlert";
      /** @description Gets or sets the disruption type of this dispruption. */
      type: string;
      /** @description Gets or sets the description of the category. */
      categoryDescription: string;
      /** @description Gets or sets the description of this disruption. */
      description: string;
      /** @description Gets or sets the summary of this disruption. */
      summary: string;
      /** @description Gets or sets the additionaInfo of this disruption. */
      additionalInfo: string;
      /**
       * Format: date-time
       * @description Gets or sets the date/time when this disruption was created.
       */
      created: string;
      /**
       * Format: date-time
       * @description Gets or sets the date/time when this disruption was last updated.
       */
      lastUpdate: string;
      /** @description Gets or sets the routes affected by this disruption */
      affectedRoutes: components["schemas"]["Tfl-20"][];
      /** @description Gets or sets the stops affected by this disruption */
      affectedStops: components["schemas"]["Tfl-18"][];
      /** @description Text describing the closure type */
      closureText: string;
    };
    "Tfl-22": {
      id: string;
      description: string;
      /** Format: date-time */
      createdDateTime: string;
      /** Format: date-time */
      lastUpdateDateTime: string;
    };
    "Tfl-23": {
      /** Format: int32 */
      duration: number;
      speed: string;
      instruction: components["schemas"]["Tfl-4"];
      obstacles: components["schemas"]["Tfl-5"][];
      /** Format: date-time */
      departureTime: string;
      /** Format: date-time */
      arrivalTime: string;
      departurePoint: components["schemas"]["Tfl-6"];
      arrivalPoint: components["schemas"]["Tfl-6"];
      path: components["schemas"]["Tfl-12"];
      routeOptions: components["schemas"]["Tfl-13"][];
      mode: components["schemas"]["Tfl-10"];
      disruptions: components["schemas"]["Tfl-21"][];
      plannedWorks: components["schemas"]["Tfl-22"][];
      /** Format: double */
      distance: number;
      isDisrupted: boolean;
      hasFixedLocations: boolean;
    };
    "Tfl-24": {
      modeType: string;
      validationType: string;
      hostDeviceType: string;
      busRouteId: string;
      /** Format: int32 */
      nationalLocationCode: number;
      /** Format: date-time */
      tapTimestamp: string;
    };
    "Tfl-25": {
      atcoCode: string;
      tapDetails: components["schemas"]["Tfl-24"];
    };
    "Tfl-26": {
      /** Format: int32 */
      lowZone: number;
      /** Format: int32 */
      highZone: number;
      /** Format: int32 */
      cost: number;
      chargeProfileName: string;
      isHopperFare: boolean;
      chargeLevel: string;
      /** Format: int32 */
      peak: number;
      /** Format: int32 */
      offPeak: number;
      taps: components["schemas"]["Tfl-25"][];
    };
    "Tfl-27": {
      text: string;
      type: string;
    };
    "Tfl-28": {
      /** Format: int32 */
      totalCost: number;
      fares: components["schemas"]["Tfl-26"][];
      caveats: components["schemas"]["Tfl-27"][];
    };
    /** @description Object that represents an end to end journey (see schematic). */
    "Tfl-29": {
      /** Format: date-time */
      startDateTime: string;
      /** Format: int32 */
      duration: number;
      /** Format: date-time */
      arrivalDateTime: string;
      legs: components["schemas"]["Tfl-23"][];
      fare: components["schemas"]["Tfl-28"];
    };
    /** @description Represents a period for which a planned works is valid. */
    "Tfl-30": {
      /**
       * Format: date-time
       * @description Gets or sets the start date.
       */
      fromDate: string;
      /**
       * Format: date-time
       * @description Gets or sets the end date.
       */
      toDate: string;
      /** @description If true is a realtime status rather than planned or info */
      isNow: boolean;
    };
    "Tfl-31": {
      /** Format: int32 */
      id: number;
      lineId: string;
      /** Format: int32 */
      statusSeverity: number;
      statusSeverityDescription: string;
      reason: string;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      validityPeriods: components["schemas"]["Tfl-30"][];
      disruption: components["schemas"]["Tfl-21"];
    };
    /** @description Description of a Route used in Route search results. */
    "Tfl-32": {
      /** @description The route code */
      routeCode: string;
      /** @description Name such as "72" */
      name: string;
      /** @description Inbound or Outbound */
      direction: string;
      /** @description The name of the Origin StopPoint */
      originationName: string;
      /** @description The name of the Destination StopPoint */
      destinationName: string;
      /** @description The Id (NaPTAN code) of the Origin StopPoint */
      originator: string;
      /** @description The Id (NaPTAN code) or the Destination StopPoint */
      destination: string;
      /** @description Regular or Night */
      serviceType: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid until.
       */
      validTo: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid from.
       */
      validFrom: string;
    };
    "Tfl-33": {
      name: string;
      uri: string;
    };
    "Tfl-34": {
      id: string;
      name: string;
      modeName: string;
      disruptions: components["schemas"]["Tfl-21"][];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      lineStatuses: components["schemas"]["Tfl-31"][];
      routeSections: components["schemas"]["Tfl-32"][];
      serviceTypes: components["schemas"]["Tfl-33"][];
      crowding: components["schemas"]["Tfl-9"];
    };
    "Tfl-35": {
      /** Format: int32 */
      originNumberOfBikes: number;
      /** Format: int32 */
      destinationNumberOfBikes: number;
      /** Format: int32 */
      originNumberOfEmptySlots: number;
      /** Format: int32 */
      destinationNumberOfEmptySlots: number;
      originId: string;
      destinationId: string;
    };
    "Tfl-36": {
      date: string;
      time: string;
      timeIs: string;
      uri: string;
    };
    "Tfl-37": {
      earliest: components["schemas"]["Tfl-36"];
      earlier: components["schemas"]["Tfl-36"];
      later: components["schemas"]["Tfl-36"];
      latest: components["schemas"]["Tfl-36"];
    };
    "Tfl-38": {
      /** Format: date-time */
      dateTime: string;
      /** @enum {string} */
      dateTimeType: "Arriving" | "Departing";
      timeAdjustments: components["schemas"]["Tfl-37"];
    };
    "Tfl-39": {
      from: string;
      to: string;
      via: string;
      uri: string;
    };
    /** @description A DTO representing a list of possible journeys. */
    "Tfl-40": {
      journeys: components["schemas"]["Tfl-29"][];
      lines: components["schemas"]["Tfl-34"][];
      cycleHireDockingStationData: components["schemas"]["Tfl-35"];
      stopMessages: string[];
      /** Format: int32 */
      recommendedMaxAgeMinutes: number;
      searchCriteria: components["schemas"]["Tfl-38"];
      journeyVector: components["schemas"]["Tfl-39"];
    };
    MetaModesGet200ApplicationJsonResponse: components["schemas"]["Tfl"][];
    MetaModesGet200TextJsonResponse: components["schemas"]["Tfl"][];
    MetaModesGet200ApplicationXmlResponse: components["schemas"]["Tfl"][];
    MetaModesGet200TextXmlResponse: components["schemas"]["Tfl"][];
    Get200ApplicationJsonResponse: { [key: string]: unknown };
  };
}

export interface operations {
  /** Gets a list of all of the available journey planner modes */
  Journey_Meta: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MetaModesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["MetaModesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["MetaModesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["MetaModesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Perform a Journey Planner search from the parameters specified in simple types */
  Journey_JourneyResultsByPathFromPathToQueryViaQueryNationalSearchQueryDateQu: {
    parameters: {
      path: {
        /** Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). */
        from: string;
        /** Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). */
        to: string;
      };
      query: {
        /** Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). */
        via?: string;
        /** Does the journey cover stops outside London? eg. "nationalSearch=true" */
        nationalSearch?: boolean;
        /** The date must be in yyyyMMdd format */
        date?: string;
        /** The time must be in HHmm format */
        time?: string;
        /** Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving" */
        timeIs?: "Arriving" | "Departing";
        /** The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking" */
        journeyPreference?: "LeastInterchange" | "LeastTime" | "LeastWalking";
        /** The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle" */
        mode?: unknown[];
        /** The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform" */
        accessibilityPreference?:
          | "NoRequirements"
          | "NoSolidStairs"
          | "NoEscalators"
          | "NoElevators"
          | "StepFreeToVehicle"
          | "StepFreeToPlatform";
        /** An optional name to associate with the origin of the journey in the results. */
        fromName?: string;
        /** An optional name to associate with the destination of the journey in the results. */
        toName?: string;
        /** An optional name to associate with the via point of the journey in the results. */
        viaName?: string;
        /** The max walking time in minutes for transfer eg. "120" */
        maxTransferMinutes?: string;
        /** The max walking time in minutes for journeys eg. "120" */
        maxWalkingMinutes?: string;
        /** The walking speed. eg possible options: "slow" | "average" | "fast". */
        walkingSpeed?: "Slow" | "Average" | "Fast";
        /** The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire" */
        cyclePreference?:
          | "None"
          | "LeaveAtStation"
          | "TakeOnTransport"
          | "AllTheWay"
          | "CycleHire";
        /** Time adjustment command. eg possible options: "TripFirst" | "TripLast" */
        adjustment?: string;
        /** A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast" */
        bikeProficiency?: "Easy" | "Moderate" | "Fast";
        /** Option to determine whether to return alternative cycling journey */
        alternativeCycle?: boolean;
        /** Option to determine whether to return alternative walking journey */
        alternativeWalking?: boolean;
        /** Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. */
        applyHtmlMarkup?: boolean;
        /** A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey */
        useMultiModalCall?: boolean;
        /** A boolean to indicate whether to optimize journeys using walking */
        walkingOptimization?: boolean;
        /** A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall". */
        taxiOnlyTrip?: boolean;
        /** A boolean to indicate whether public transport routes should include directions between platforms and station entrances. */
        routeBetweenEntrances?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-40"];
          "text/json": components["schemas"]["Tfl-40"];
          "application/xml": components["schemas"]["Tfl-40"];
          "text/xml": components["schemas"]["Tfl-40"];
        };
      };
    };
  };
  /** Forwards any remaining requests to the back-end */
  Forward_Proxy: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Get200ApplicationJsonResponse"];
        };
      };
    };
  };
}

export interface external {}
