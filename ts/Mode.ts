/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ActiveServiceTypes": {
    /**
     * Returns the service type active for a mode.
     *             Currently only supports tube
     */
    get: operations["Mode_GetActiveServiceTypes"];
  };
  "/{mode}/Arrivals": {
    /** Gets the next arrival predictions for all stops of a given mode */
    get: operations["Mode_Arrivals"];
  };
}

export interface components {
  schemas: {
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl.Api.Presentation.Entities.ActiveServiceType": {
      mode: string;
      serviceType: string;
    };
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    /** @description DTO to capture the prediction details */
    "Tfl.Api.Presentation.Entities.Prediction": {
      /** @description The identitier for the prediction */
      id: string;
      /**
       * Format: int32
       * @description The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
       */
      operationType: number;
      /** @description The actual vehicle in transit (for train modes, the leading car of the rolling set) */
      vehicleId: string;
      /** @description Identifier for the prediction */
      naptanId: string;
      /** @description Station name */
      stationName: string;
      /** @description Unique identifier for the Line */
      lineId: string;
      /** @description Line Name */
      lineName: string;
      /** @description Platform name (for bus, this is the stop letter) */
      platformName: string;
      /** @description Direction (unified to inbound/outbound) */
      direction: string;
      /** @description Bearing (between 0 to 359) */
      bearing: string;
      /** @description Naptan Identifier for the prediction's destination */
      destinationNaptanId: string;
      /** @description Name of the destination */
      destinationName: string;
      /**
       * Format: date-time
       * @description Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
       */
      timestamp: string;
      /**
       * Format: int32
       * @description Prediction of the Time to station in seconds
       */
      timeToStation: number;
      /** @description The current location of the vehicle. */
      currentLocation: string;
      /** @description Routing information or other descriptive text about the path of the vehicle towards the destination */
      towards: string;
      /**
       * Format: date-time
       * @description The expected arrival time of the vehicle at the stop/station
       */
      expectedArrival: string;
      /**
       * Format: date-time
       * @description The expiry time for the prediction
       */
      timeToLive: string;
      /** @description The mode name of the station/line the prediction relates to */
      modeName: string;
      timing: components["schemas"]["Tfl.Api.Presentation.Entities.PredictionTiming"];
    };
    "Tfl.Api.Presentation.Entities.PredictionTiming": {
      countdownServerAdjustment: string;
      /** Format: date-time */
      source: string;
      /** Format: date-time */
      insert: string;
      /** Format: date-time */
      read: string;
      /** Format: date-time */
      sent: string;
      /** Format: date-time */
      received: string;
    };
    "Tfl-Api-Presentation-Entities-PredictionArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
  };
}

export interface operations {
  /**
   * Returns the service type active for a mode.
   *             Currently only supports tube
   */
  Mode_GetActiveServiceTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-3"];
        };
      };
    };
  };
  /** Gets the next arrival predictions for all stops of a given mode */
  Mode_Arrivals: {
    parameters: {
      path: {
        /** A mode name e.g. tube, dlr */
        mode: string;
      };
      query: {
        /** Format - int32. A number of arrivals to return for each stop, -1 to return all available. */
        count?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-7"];
        };
      };
    };
  };
}

export interface external {}
