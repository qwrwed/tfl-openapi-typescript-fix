/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/AccidentStats/{year}": {
    /** Gets all accident details for accidents occuring in the specified year */
    get: operations["AccidentStats_Get"];
  };
  "/AirQuality": {
    /** Gets air quality data feed */
    get: operations["AirQuality_Get"];
  };
  "/BikePoint": {
    /**
     * Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
     *             numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
     */
    get: operations["BikePoint_GetAll"];
  };
  "/BikePoint/{id}": {
    /** Gets the bike point with the given id. */
    get: operations["BikePoint_Get"];
  };
  "/BikePoint/Search": {
    /**
     * Search for bike stations by their name, a bike point's name often contains information about the name of the street
     *             or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
     *             or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
     */
    get: operations["BikePoint_Search"];
  };
  "/Cabwise/search": {
    /** Gets taxis and minicabs contact information */
    get: operations["Cabwise_Get"];
  };
  "/Journey/Meta/Modes": {
    /** Gets a list of all of the available journey planner modes */
    get: operations["Journey_Meta"];
  };
  "/Journey/JourneyResults/{from}/to/{to}": {
    /** Perform a Journey Planner search from the parameters specified in simple types */
    get: operations["Journey_JourneyResults"];
  };
  "/Line/Meta/Modes": {
    /** Gets a list of valid modes */
    get: operations["Line_MetaModes"];
  };
  "/Line/Meta/Severity": {
    /** Gets a list of valid severity codes */
    get: operations["Line_MetaSeverity"];
  };
  "/Line/Meta/DisruptionCategories": {
    /** Gets a list of valid disruption categories */
    get: operations["Line_MetaDisruptionCategories"];
  };
  "/Line/Meta/ServiceTypes": {
    /** Gets a list of valid ServiceTypes to filter on */
    get: operations["Line_MetaServiceTypes"];
  };
  "/Line/{ids}": {
    /** Gets lines that match the specified line ids. */
    get: operations["Line_Get"];
  };
  "/Line/Mode/{modes}": {
    /** Gets lines that serve the given modes. */
    get: operations["Line_GetByMode"];
  };
  "/Line/Route": {
    /** Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. */
    get: operations["Line_Route"];
  };
  "/Line/{ids}/Route": {
    /** Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. */
    get: operations["Line_LineRoutesByIds"];
  };
  "/Line/Mode/{modes}/Route": {
    /** Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route */
    get: operations["Line_RouteByMode"];
  };
  "/Line/{id}/Route/Sequence/{direction}": {
    /** Gets all valid routes for given line id, including the sequence of stops on each route. */
    get: operations["Line_RouteSequence"];
  };
  "/Line/{ids}/Status/{StartDate}/to/{EndDate}": {
    /** Gets the line status for given line ids during the provided dates e.g Minor Delays */
    get: operations["Line_Status"];
  };
  "/Line/{ids}/Status": {
    /** Gets the line status of for given line ids e.g Minor Delays */
    get: operations["Line_StatusByIds"];
  };
  "/Line/Search/{query}": {
    /** Search for lines or routes matching the query string */
    get: operations["Line_Search"];
  };
  "/Line/Status/{severity}": {
    /**
     * Gets the line status for all lines with a given severity
     *             A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     */
    get: operations["Line_StatusBySeverity"];
  };
  "/Line/Mode/{modes}/Status": {
    /** Gets the line status of for all lines for the given modes */
    get: operations["Line_StatusByMode"];
  };
  "/Line/{id}/StopPoints": {
    /** Gets a list of the stations that serve the given line id */
    get: operations["Line_StopPoints"];
  };
  "/Line/{id}/Timetable/{fromStopPointId}": {
    /** Gets the timetable for a specified station on the give line */
    get: operations["Line_Timetable"];
  };
  "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}": {
    /** Gets the timetable for a specified station on the give line with specified destination */
    get: operations["Line_TimetableTo"];
  };
  "/Line/{ids}/Disruption": {
    /** Get disruptions for the given line ids */
    get: operations["Line_Disruption"];
  };
  "/Line/Mode/{modes}/Disruption": {
    /** Get disruptions for all lines of the given modes. */
    get: operations["Line_DisruptionByMode"];
  };
  "/Line/{ids}/Arrivals/{stopPointId}": {
    /** Get the list of arrival predictions for given line ids based at the given stop */
    get: operations["Line_Arrivals"];
  };
  "/Mode/ActiveServiceTypes": {
    /**
     * Returns the service type active for a mode.
     *             Currently only supports tube
     */
    get: operations["Mode_GetActiveServiceTypes"];
  };
  "/Mode/{mode}/Arrivals": {
    /** Gets the next arrival predictions for all stops of a given mode */
    get: operations["Mode_Arrivals"];
  };
  "/Occupancy/CarPark/{id}": {
    /** Gets the occupancy for a car park with a given id */
    get: operations["Occupancy_GetById"];
  };
  "/Occupancy/CarPark": {
    /** Gets the occupancy for all car parks that have occupancy data */
    get: operations["Occupancy_Get"];
  };
  "/Occupancy/ChargeConnector/{ids}": {
    /** Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId) */
    get: operations["Occupancy_GetChargeConnectorStatus"];
  };
  "/Occupancy/ChargeConnector": {
    /** Gets the occupancy for all charge connectors */
    get: operations["Occupancy_GetAllChargeConnectorStatus"];
  };
  "/Occupancy/BikePoints/{ids}": {
    /** Get the occupancy for bike points. */
    get: operations["Occupancy_GetBikePointsOccupancies"];
  };
  "/Place/Meta/Categories": {
    /** Gets a list of all of the available place property categories and keys. */
    get: operations["Place_MetaCategories"];
  };
  "/Place/Meta/PlaceTypes": {
    /** Gets a list of the available types of Place. */
    get: operations["Place_MetaPlaceTypes"];
  };
  "/Place/Address/Streets/{Postcode}": {
    /** Gets the set of streets associated with a post code. */
    get: operations["Place_GetStreetsByPostCode"];
  };
  "/Place/Type/{types}": {
    /** Gets all places of a given type */
    get: operations["Place_GetByType"];
  };
  "/Place/{id}": {
    /** Gets the place with the given id. */
    get: operations["PlaceById"];
  };
  "/Place": {
    /**
     * Gets the places that lie within a geographic region. The geographic region of interest can either be specified
     *             by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of
     *             its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.
     *             Optionally filters on type and can strip properties for a smaller payload.
     */
    get: operations["Place_GetByGeo"];
  };
  "/Place/{type}/At/{Lat}/{Lon}": {
    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place
     *             must be polygonal e.g. a BoroughBoundary.
     */
    get: operations["Place_GetAt"];
  };
  "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}": {
    /** Gets the place overlay for a given set of co-ordinates and a given width/height. */
    get: operations["Place_GetOverlay"];
  };
  "/Place/Search": {
    /** Gets all places that matches the given query */
    get: operations["Place_Search"];
  };
  "/Road": {
    /** Gets all roads managed by TfL */
    get: operations["Road_Get"];
  };
  "/Road/{ids}": {
    /** Gets the road with the specified id (e.g. A1) */
    get: operations["Road_GetById"];
  };
  "/Road/{ids}/Status": {
    /** Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. */
    get: operations["Road_Status"];
  };
  "/Road/{ids}/Disruption": {
    /** Get active disruptions, filtered by road ids */
    get: operations["Road_Disruption"];
  };
  "/Road/all/Street/Disruption": {
    /** Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. */
    get: operations["Road_DisruptedStreets"];
  };
  "/Road/all/Disruption/{disruptionIds}": {
    /** Gets a list of active disruptions filtered by disruption Ids. */
    get: operations["Road_DisruptionById"];
  };
  "/Road/Meta/Categories": {
    /** Gets a list of valid RoadDisruption categories */
    get: operations["Road_MetaCategories"];
  };
  "/Road/Meta/Severities": {
    /** Gets a list of valid RoadDisruption severity codes */
    get: operations["Road_MetaSeverities"];
  };
  "/Search": {
    /**
     * Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size
     *             of 100. To return subsequent pages, use the paginated overload.
     */
    get: operations["Search_Get"];
  };
  "/Search/BusSchedules": {
    /** Searches the bus schedules folder on S3 for a given bus number. */
    get: operations["Search_BusSchedules"];
  };
  "/Search/Meta/SearchProviders": {
    /** Gets the available searchProvider names. */
    get: operations["Search_MetaSearchProviders"];
  };
  "/Search/Meta/Categories": {
    /** Gets the available search categories. */
    get: operations["Search_MetaCategories"];
  };
  "/Search/Meta/Sorts": {
    /** Gets the available sorting options. */
    get: operations["Search_MetaSorts"];
  };
  "/StopPoint/Meta/Categories": {
    /** Gets the list of available StopPoint additional information categories */
    get: operations["StopPoint_MetaCategories"];
  };
  "/StopPoint/Meta/StopTypes": {
    /** Gets the list of available StopPoint types */
    get: operations["StopPoint_MetaStopTypes"];
  };
  "/StopPoint/Meta/Modes": {
    /** Gets the list of available StopPoint modes */
    get: operations["StopPoint_MetaModes"];
  };
  "/StopPoint/{ids}": {
    /** Gets a list of StopPoints corresponding to the given list of stop ids. */
    get: operations["StopPoint_GetById"];
  };
  "/StopPoint/{id}/placeTypes": {
    /** Get a list of places corresponding to a given id and place types. */
    get: operations["StopPoint_Get"];
  };
  "/StopPoint/{id}/Crowding/{line}": {
    /** Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. */
    get: operations["StopPoint_Crowding"];
  };
  "/StopPoint/Type/{types}": {
    /** Gets all stop points of a given type */
    get: operations["StopPoint_GetByType"];
  };
  "/StopPoint/Type/{types}/page/{page}": {
    /** Gets all the stop points of given type(s) with a page number */
    get: operations["StopPoint_GetByTypeWithPagination"];
  };
  "/StopPoint/ServiceTypes": {
    /** Gets the service types for a given stoppoint */
    get: operations["StopPoint_GetServiceTypes"];
  };
  "/StopPoint/{id}/Arrivals": {
    /** Gets the list of arrival predictions for the given stop point id */
    get: operations["StopPoint_Arrivals"];
  };
  "/StopPoint/{id}/ArrivalDepartures": {
    /** Gets the list of arrival and departure predictions for the given stop point id (overground and tfl rail only) */
    get: operations["StopPoint_ArrivalDepartures"];
  };
  "/StopPoint/{id}/CanReachOnLine/{lineId}": {
    /** Gets Stopoints that are reachable from a station/line combination. */
    get: operations["StopPoint_ReachableFrom"];
  };
  "/StopPoint/{id}/Route": {
    /** Returns the route sections for all the lines that service the given stop point ids */
    get: operations["StopPoint_Route"];
  };
  "/StopPoint/Mode/{modes}/Disruption": {
    /** Gets a distinct list of disrupted stop points for the given modes */
    get: operations["StopPoint_DisruptionByMode"];
  };
  "/StopPoint/{ids}/Disruption": {
    /** Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. */
    get: operations["StopPoint_Disruption"];
  };
  "/StopPoint/{id}/DirectionTo/{toStopPointId}": {
    /** Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&gt; to. */
    get: operations["StopPoint_Direction"];
  };
  "/StopPoint": {
    /** Gets a list of StopPoints within {radius} by the specified criteria */
    get: operations["StopPoint_GetByGeoPoint"];
  };
  "/StopPoint/Mode/{modes}": {
    /** Gets a list of StopPoints filtered by the modes available at that StopPoint. */
    get: operations["StopPoint_GetByMode"];
  };
  "/StopPoint/Search/{query}": {
    /** Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. */
    get: operations["StopPoint_SearchById"];
  };
  "/StopPoint/Search": {
    /** Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. */
    get: operations["StopPoint_Search"];
  };
  "/StopPoint/Sms/{id}": {
    /** Gets a StopPoint for a given sms code. */
    get: operations["StopPoint_GetBySms"];
  };
  "/StopPoint/{stopPointId}/TaxiRanks": {
    /** Gets a list of taxi ranks corresponding to the given stop point id. */
    get: operations["StopPoint_GetTaxiRanksByIds"];
  };
  "/StopPoint/{stopPointId}/CarParks": {
    /** Get car parks corresponding to the given stop point id. */
    get: operations["StopPoint_GetCarParksById"];
  };
  "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}": {
    /** Gets the TravelTime overlay. */
    get: operations["TravelTime_GetOverlay"];
  };
  "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}": {
    /** Gets the TravelTime overlay. */
    get: operations["TravelTime_GetCompareOverlay"];
  };
  "/Vehicle/{ids}/Arrivals": {
    /** Gets the predictions for a given list of vehicle Id's. */
    get: operations["Vehicle_Get"];
  };
  "/Vehicle/EmissionSurcharge": {
    /** Gets the Emissions Surcharge compliance for the Vehicle */
    get: operations["Vehicle_GetEmissionsSurchargeCompliance"];
  };
  "/Vehicle/UlezCompliance": {
    /** Gets the Ulez Surcharge compliance for the Vehicle */
    get: operations["Vehicle_GetUlezCompliance"];
  };
  "/*": {
    /** GET All */
    get: operations["wildcard"];
  };
}

export interface components {
  schemas: {
    "Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail": {
      /** Format: int32 */
      id: number;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
      location: string;
      /** Format: date-time */
      date: string;
      severity: string;
      borough: string;
      casualties: components["schemas"]["Tfl.Api.Presentation.Entities.AccidentStats.Casualty"][];
      vehicles: components["schemas"]["Tfl.Api.Presentation.Entities.AccidentStats.Vehicle"][];
    };
    "Tfl.Api.Presentation.Entities.AccidentStats.Casualty": {
      /** Format: int32 */
      age: number;
      class: string;
      severity: string;
      mode: string;
      ageBand: string;
    };
    "Tfl.Api.Presentation.Entities.AccidentStats.Vehicle": {
      type: string;
    };
    "Tfl.Api.Presentation.Entities.AccidentStats.AccidentStatsOrderedSummary": {
      /** Format: int32 */
      year: number;
      borough: string;
      /** Format: int32 */
      accidents: number;
    };
    "System.Object": { [key: string]: unknown };
    "Tfl.Api.Presentation.Entities.Place": {
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl.Api.Presentation.Entities.AdditionalProperties"][];
      children: components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.AdditionalProperties": {
      category: string;
      key: string;
      sourceSystemKey: string;
      value: string;
      /** Format: date-time */
      modified: string;
    };
    "Tfl.Api.Presentation.Entities.CycleSuperhighway": {
      /** @description The Id */
      id: string;
      /** @description The long label to show on maps when zoomed in */
      label: string;
      /** @description The short label to show on maps */
      labelShort: string;
      geography: components["schemas"]["System.Data.Spatial.DbGeography"];
      /** @description True if the route is split into segments */
      segmented: boolean;
      /**
       * Format: date-time
       * @description When the data was last updated
       */
      modified: string;
      /**
       * @description Cycle route status i.e Proposed, Existing etc
       * @enum {string}
       */
      status:
        | "Unknown"
        | "All"
        | "Open"
        | "In Progress"
        | "Planned"
        | "Planned - Subject to feasibility and consultation."
        | "Not Open";
      /**
       * @description Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
       * @enum {string}
       */
      routeType:
        | "Unknown"
        | "All"
        | "Cycle Superhighways"
        | "Quietways"
        | "Cycleways"
        | "Mini-Hollands"
        | "Central London Grid";
    };
    "System.Data.Spatial.DbGeography": {
      geography: components["schemas"]["System.Data.Spatial.DbGeographyWellKnownValue"];
    };
    "System.Data.Spatial.DbGeographyWellKnownValue": {
      /** Format: int32 */
      coordinateSystemId: number;
      wellKnownText: string;
      /** Format: byte */
      wellKnownBinary: string;
    };
    "Tfl.Api.Presentation.Entities.Fares.Fare": {
      /** Format: int32 */
      id: number;
      passengerType: string;
      /** Format: date-time */
      validFrom: string;
      /** Format: date-time */
      validUntil: string;
      ticketTime: string;
      ticketType: string;
      cost: string;
      /** Format: double */
      cap: number;
      description: string;
      zone: string;
      mode: string;
    };
    "Tfl.Api.Presentation.Entities.Fares.FaresSection": {
      header: string;
      /** Format: int32 */
      index: number;
      journey: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.Journey"];
      rows: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.FareDetails"][];
      messages: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
    };
    "Tfl.Api.Presentation.Entities.Fares.Journey": {
      fromStation: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.FareStation"];
      toStation: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.FareStation"];
    };
    "Tfl.Api.Presentation.Entities.Fares.FareDetails": {
      /** Format: int32 */
      boundsId: number;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      mode: string;
      passengerType: string;
      contactlessPAYGOnlyFare: boolean;
      from: string;
      to: string;
      fromStation: string;
      toStation: string;
      via: string;
      routeCode: string;
      displayName: string;
      /** Format: int32 */
      displayOrder: number;
      routeDescription: string;
      validatorInformation: string;
      operator: string;
      specialFare: boolean;
      throughFare: boolean;
      isTour: boolean;
      ticketsAvailable: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.Ticket"][];
      messages: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
    };
    "Tfl.Api.Presentation.Entities.Message": {
      /** Format: int32 */
      bulletOrder: number;
      header: boolean;
      messageText: string;
      linkText: string;
      url: string;
    };
    "Tfl.Api.Presentation.Entities.Fares.FareStation": {
      atcoCode: string;
      commonName: string;
      /** @enum {string} */
      fareCategory:
        | "Cash"
        | "Oyster"
        | "Contactless"
        | "ContactlessOnly"
        | "All";
    };
    "Tfl.Api.Presentation.Entities.Fares.Ticket": {
      passengerType: string;
      ticketType: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.TicketType"];
      ticketTime: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.TicketTime"];
      cost: string;
      description: string;
      mode: string;
      /** Format: int32 */
      displayOrder: number;
      messages: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
    };
    "Tfl.Api.Presentation.Entities.Fares.TicketType": {
      type: string;
      description: string;
    };
    "Tfl.Api.Presentation.Entities.Fares.TicketTime": {
      type: string;
      description: string;
    };
    "Tfl.Api.Presentation.Entities.Fares.FareBounds": {
      /** Format: int32 */
      id: number;
      from: string;
      to: string;
      via: string;
      routeCode: string;
      description: string;
      displayName: string;
      operator: string;
      /** Format: int32 */
      displayOrder: number;
      isPopularFare: boolean;
      isPopularTravelCard: boolean;
      isTour: boolean;
      messages: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
    };
    "Tfl.Api.Presentation.Entities.Fares.FaresPeriod": {
      /** Format: int32 */
      id: number;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      viewableDate: string;
      /** Format: date-time */
      endDate: string;
      isFuture: boolean;
    };
    "Tfl.Api.Presentation.Entities.Fares.FaresMode": {
      /** Format: int32 */
      id: number;
      name: string;
      description: string;
    };
    "Tfl.Api.Presentation.Entities.Fares.PassengerType": {
      type: string;
      description: string;
      displayName: string;
      /** Format: int32 */
      displayOrder: number;
    };
    "Tfl.Api.Presentation.Entities.Coordinate": {
      /** Format: double */
      longitude: number;
      /** Format: double */
      latitude: number;
      /** Format: double */
      easting: number;
      /** Format: double */
      northing: number;
      /** Format: int32 */
      xCoord: number;
      /** Format: int32 */
      yCoord: number;
    };
    "Tfl.Api.Presentation.Entities.GeoCodeSearchMatch": {
      /** @description The type of the place e.g. "street_address" */
      types: string[];
      /** @description A string describing the formatted address of the place. Adds additional context to the place's Name. */
      address: string;
      id: string;
      url: string;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.Mode": {
      isTflService: boolean;
      isFarePaying: boolean;
      isScheduledService: boolean;
      modeName: string;
    };
    /** @description A DTO representing a list of possible journeys. */
    "Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult": {
      journeys: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.Journey"][];
      lines: components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
      cycleHireDockingStationData: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData"];
      stopMessages: string[];
      /** Format: int32 */
      recommendedMaxAgeMinutes: number;
      searchCriteria: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria"];
      journeyVector: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector"];
    };
    /** @description Object that represents an end to end journey (see schematic). */
    "Tfl.Api.Presentation.Entities.JourneyPlanner.Journey": {
      /** Format: date-time */
      startDateTime: string;
      /** Format: int32 */
      duration: number;
      /** Format: date-time */
      arrivalDateTime: string;
      legs: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.Leg"][];
      fare: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare"];
    };
    "Tfl.Api.Presentation.Entities.Line": {
      id: string;
      name: string;
      modeName: string;
      disruptions: components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      lineStatuses: components["schemas"]["Tfl.Api.Presentation.Entities.LineStatus"][];
      routeSections: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedRoute"][];
      serviceTypes: components["schemas"]["Tfl.Api.Presentation.Entities.LineServiceTypeInfo"][];
      crowding: components["schemas"]["Tfl.Api.Presentation.Entities.Crowding"];
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData": {
      /** Format: int32 */
      originNumberOfBikes: number;
      /** Format: int32 */
      destinationNumberOfBikes: number;
      /** Format: int32 */
      originNumberOfEmptySlots: number;
      /** Format: int32 */
      destinationNumberOfEmptySlots: number;
      originId: string;
      destinationId: string;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria": {
      /** Format: date-time */
      dateTime: string;
      /** @enum {string} */
      dateTimeType: "Arriving" | "Departing";
      timeAdjustments: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments"];
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector": {
      from: string;
      to: string;
      via: string;
      uri: string;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.Leg": {
      /** Format: int32 */
      duration: number;
      speed: string;
      instruction: components["schemas"]["Tfl.Api.Presentation.Entities.Instruction"];
      obstacles: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle"][];
      /** Format: date-time */
      departureTime: string;
      /** Format: date-time */
      arrivalTime: string;
      departurePoint: components["schemas"]["Tfl.Api.Presentation.Entities.Point"];
      arrivalPoint: components["schemas"]["Tfl.Api.Presentation.Entities.Point"];
      path: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.Path"];
      routeOptions: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption"][];
      mode: components["schemas"]["Tfl.Api.Presentation.Entities.Identifier"];
      disruptions: components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
      plannedWorks: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork"][];
      /** Format: double */
      distance: number;
      isDisrupted: boolean;
      hasFixedLocations: boolean;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare": {
      /** Format: int32 */
      totalCost: number;
      fares: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.Fare"][];
      caveats: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat"][];
    };
    /** @description Represents a disruption to a route within the transport network. */
    "Tfl.Api.Presentation.Entities.Disruption": {
      /**
       * @description Gets or sets the category of this dispruption.
       * @enum {string}
       */
      category:
        | "Undefined"
        | "RealTime"
        | "PlannedWork"
        | "Information"
        | "Event"
        | "Crowding"
        | "StatusAlert";
      /** @description Gets or sets the disruption type of this dispruption. */
      type: string;
      /** @description Gets or sets the description of the category. */
      categoryDescription: string;
      /** @description Gets or sets the description of this disruption. */
      description: string;
      /** @description Gets or sets the summary of this disruption. */
      summary: string;
      /** @description Gets or sets the additionaInfo of this disruption. */
      additionalInfo: string;
      /**
       * Format: date-time
       * @description Gets or sets the date/time when this disruption was created.
       */
      created: string;
      /**
       * Format: date-time
       * @description Gets or sets the date/time when this disruption was last updated.
       */
      lastUpdate: string;
      /** @description Gets or sets the routes affected by this disruption */
      affectedRoutes: components["schemas"]["Tfl.Api.Presentation.Entities.RouteSection"][];
      /** @description Gets or sets the stops affected by this disruption */
      affectedStops: components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
      /** @description Text describing the closure type */
      closureText: string;
    };
    "Tfl.Api.Presentation.Entities.LineStatus": {
      /** Format: int32 */
      id: number;
      lineId: string;
      /** Format: int32 */
      statusSeverity: number;
      statusSeverityDescription: string;
      reason: string;
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      modified: string;
      validityPeriods: components["schemas"]["Tfl.Api.Presentation.Entities.ValidityPeriod"][];
      disruption: components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"];
    };
    /** @description Description of a Route used in Route search results. */
    "Tfl.Api.Presentation.Entities.MatchedRoute": {
      /** @description The route code */
      routeCode: string;
      /** @description Name such as "72" */
      name: string;
      /** @description Inbound or Outbound */
      direction: string;
      /** @description The name of the Origin StopPoint */
      originationName: string;
      /** @description The name of the Destination StopPoint */
      destinationName: string;
      /** @description The Id (NaPTAN code) of the Origin StopPoint */
      originator: string;
      /** @description The Id (NaPTAN code) or the Destination StopPoint */
      destination: string;
      /** @description Regular or Night */
      serviceType: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid until.
       */
      validTo: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid from.
       */
      validFrom: string;
    };
    "Tfl.Api.Presentation.Entities.LineServiceTypeInfo": {
      name: string;
      uri: string;
    };
    "Tfl.Api.Presentation.Entities.Crowding": {
      /** @description Busiest times at a station (static information) */
      passengerFlows: components["schemas"]["Tfl.Api.Presentation.Entities.PassengerFlow"][];
      /** @description Train Loading on a scale 1-6, 1 being "Very quiet" and 6 being "Exceptionally busy" (static information) */
      trainLoadings: components["schemas"]["Tfl.Api.Presentation.Entities.TrainLoading"][];
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments": {
      earliest: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment"];
      earlier: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment"];
      later: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment"];
      latest: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment"];
    };
    "Tfl.Api.Presentation.Entities.Instruction": {
      summary: string;
      detailed: string;
      steps: components["schemas"]["Tfl.Api.Presentation.Entities.InstructionStep"][];
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle": {
      type: string;
      incline: string;
      /** Format: int32 */
      stopId: number;
      position: string;
    };
    /** @description Represents a point located at a latitude and longitude using the WGS84 co-ordinate system. */
    "Tfl.Api.Presentation.Entities.Point": {
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.Path": {
      lineString: string;
      stopPoints: components["schemas"]["Tfl.Api.Presentation.Entities.Identifier"][];
      elevation: components["schemas"]["Tfl.Api.Common.JourneyPlanner.JpElevation"][];
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption": {
      /** @description The Id of the route */
      id: string;
      /** @description Name such as "72" */
      name: string;
      directions: string[];
      lineIdentifier: components["schemas"]["Tfl.Api.Presentation.Entities.Identifier"];
    };
    "Tfl.Api.Presentation.Entities.Identifier": {
      id: string;
      name: string;
      uri: string;
      fullName: string;
      type: string;
      crowding: components["schemas"]["Tfl.Api.Presentation.Entities.Crowding"];
      /** @enum {string} */
      routeType:
        | "Unknown"
        | "All"
        | "Cycle Superhighways"
        | "Quietways"
        | "Cycleways"
        | "Mini-Hollands"
        | "Central London Grid";
      /** @enum {string} */
      status:
        | "Unknown"
        | "All"
        | "Open"
        | "In Progress"
        | "Planned"
        | "Planned - Subject to feasibility and consultation."
        | "Not Open";
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork": {
      id: string;
      description: string;
      /** Format: date-time */
      createdDateTime: string;
      /** Format: date-time */
      lastUpdateDateTime: string;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.Fare": {
      /** Format: int32 */
      lowZone: number;
      /** Format: int32 */
      highZone: number;
      /** Format: int32 */
      cost: number;
      chargeProfileName: string;
      isHopperFare: boolean;
      chargeLevel: string;
      /** Format: int32 */
      peak: number;
      /** Format: int32 */
      offPeak: number;
      taps: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap"][];
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat": {
      text: string;
      type: string;
    };
    "Tfl.Api.Presentation.Entities.RouteSection": {
      /** @description The Id of the route */
      id: string;
      /** @description The Id of the Line */
      lineId: string;
      /** @description The route code */
      routeCode: string;
      /** @description Name such as "72" */
      name: string;
      /** @description The co-ordinates of the route's path as a geoJSON lineString */
      lineString: string;
      /** @description Inbound or Outbound */
      direction: string;
      /** @description The name of the Origin StopPoint */
      originationName: string;
      /** @description The name of the Destination StopPoint */
      destinationName: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid until.
       */
      validTo: string;
      /**
       * Format: date-time
       * @description The DateTime that the Service containing this Route is valid from.
       */
      validFrom: string;
      routeSectionNaptanEntrySequence: components["schemas"]["Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence"][];
    };
    "Tfl.Api.Presentation.Entities.StopPoint": {
      naptanId: string;
      platformName: string;
      /** @description The indicator of the stop point e.g. "Stop K" */
      indicator: string;
      /** @description The stop letter, if it could be cleansed from the Indicator e.g. "K" */
      stopLetter: string;
      modes: string[];
      icsCode: string;
      smsCode: string;
      stopType: string;
      stationNaptan: string;
      accessibilitySummary: string;
      hubNaptanCode: string;
      lines: components["schemas"]["Tfl.Api.Presentation.Entities.Identifier"][];
      lineGroup: components["schemas"]["Tfl.Api.Presentation.Entities.LineGroup"][];
      lineModeGroups: components["schemas"]["Tfl.Api.Presentation.Entities.LineModeGroup"][];
      fullName: string;
      naptanMode: string;
      status: boolean;
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl.Api.Presentation.Entities.AdditionalProperties"][];
      children: components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    /** @description Represents a period for which a planned works is valid. */
    "Tfl.Api.Presentation.Entities.ValidityPeriod": {
      /**
       * Format: date-time
       * @description Gets or sets the start date.
       */
      fromDate: string;
      /**
       * Format: date-time
       * @description Gets or sets the end date.
       */
      toDate: string;
      /** @description If true is a realtime status rather than planned or info */
      isNow: boolean;
    };
    "Tfl.Api.Presentation.Entities.PassengerFlow": {
      /** @description Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc. */
      timeSlice: string;
      /**
       * Format: int32
       * @description Count of passenger flow towards a platform
       */
      value: number;
    };
    "Tfl.Api.Presentation.Entities.TrainLoading": {
      /** @description The Line Name e.g. "Victoria" */
      line: string;
      /** @description Direction of the Line e.g. NB, SB, WB etc. */
      lineDirection: string;
      /** @description Direction displayed on the platform e.g. NB, SB, WB etc. */
      platformDirection: string;
      /** @description Direction in regards to Journey Planner i.e. inbound or outbound */
      direction: string;
      /** @description Naptan of the adjacent station */
      naptanTo: string;
      /** @description Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc. */
      timeSlice: string;
      /**
       * Format: int32
       * @description Scale between 1-6,
       *              1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy
       */
      value: number;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment": {
      date: string;
      time: string;
      timeIs: string;
      uri: string;
    };
    "Tfl.Api.Presentation.Entities.InstructionStep": {
      description: string;
      turnDirection: string;
      streetName: string;
      /** Format: int32 */
      distance: number;
      /** Format: int32 */
      cumulativeDistance: number;
      /** Format: int32 */
      skyDirection: number;
      /** @enum {string} */
      skyDirectionDescription:
        | "North"
        | "NorthEast"
        | "East"
        | "SouthEast"
        | "South"
        | "SouthWest"
        | "West"
        | "NorthWest";
      /** Format: int32 */
      cumulativeTravelTime: number;
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
      pathAttribute: components["schemas"]["Tfl.Api.Presentation.Entities.PathAttribute"];
      descriptionHeading: string;
      /** @enum {string} */
      trackType:
        | "CycleSuperHighway"
        | "CanalTowpath"
        | "QuietRoad"
        | "ProvisionForCyclists"
        | "BusyRoads"
        | "None"
        | "PushBike"
        | "Quietway";
    };
    "Tfl.Api.Common.JourneyPlanner.JpElevation": {
      /** Format: int32 */
      distance: number;
      /** Format: double */
      startLat: number;
      /** Format: double */
      startLon: number;
      /** Format: double */
      endLat: number;
      /** Format: double */
      endLon: number;
      /** Format: int32 */
      heightFromPreviousPoint: number;
      /** Format: double */
      gradient: number;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap": {
      atcoCode: string;
      tapDetails: components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails"];
    };
    "Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence": {
      /** Format: int32 */
      ordinal: number;
      stopPoint: components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"];
    };
    "Tfl.Api.Presentation.Entities.LineGroup": {
      naptanIdReference: string;
      stationAtcoCode: string;
      lineIdentifier: string[];
    };
    "Tfl.Api.Presentation.Entities.LineModeGroup": {
      modeName: string;
      lineIdentifier: string[];
    };
    "Tfl.Api.Presentation.Entities.PathAttribute": {
      name: string;
      value: string;
    };
    "Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails": {
      modeType: string;
      validationType: string;
      hostDeviceType: string;
      busRouteId: string;
      /** Format: int32 */
      nationalLocationCode: number;
      /** Format: date-time */
      tapTimestamp: string;
    };
    "Tfl.Api.Presentation.Entities.StatusSeverity": {
      modeName: string;
      /** Format: int32 */
      severityLevel: number;
      description: string;
    };
    "Tfl.Api.Presentation.Entities.RouteSequence": {
      lineId: string;
      lineName: string;
      direction: string;
      isOutboundOnly: boolean;
      mode: string;
      lineStrings: string[];
      stations: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedStop"][];
      stopPointSequences: components["schemas"]["Tfl.Api.Presentation.Entities.StopPointSequence"][];
      orderedLineRoutes: components["schemas"]["Tfl.Api.Presentation.Entities.OrderedRoute"][];
    };
    "Tfl.Api.Presentation.Entities.MatchedStop": {
      /** Format: int32 */
      routeId: number;
      parentId: string;
      stationId: string;
      icsId: string;
      topMostParentId: string;
      direction: string;
      towards: string;
      modes: string[];
      stopType: string;
      stopLetter: string;
      zone: string;
      accessibilitySummary: string;
      hasDisruption: boolean;
      lines: components["schemas"]["Tfl.Api.Presentation.Entities.Identifier"][];
      status: boolean;
      id: string;
      url: string;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.StopPointSequence": {
      lineId: string;
      lineName: string;
      direction: string;
      /**
       * Format: int32
       * @description The id of this branch.
       */
      branchId: number;
      /**
       * @description The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be
       *             identical in the case of a looped route e.g. the Circle line.
       */
      nextBranchIds: number[];
      /**
       * @description The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be
       *             identical in the case of a looped route e.g. the Circle line.
       */
      prevBranchIds: number[];
      stopPoint: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedStop"][];
      /** @enum {string} */
      serviceType: "Regular" | "Night";
    };
    "Tfl.Api.Presentation.Entities.OrderedRoute": {
      name: string;
      naptanIds: string[];
      serviceType: string;
    };
    "Tfl.Api.Common.DateRange": {
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
    };
    "Tfl.Api.Presentation.Entities.RouteSearchResponse": {
      input: string;
      searchMatches: components["schemas"]["Tfl.Api.Presentation.Entities.RouteSearchMatch"][];
    };
    "Tfl.Api.Presentation.Entities.RouteSearchMatch": {
      lineId: string;
      mode: string;
      lineName: string;
      lineRouteSection: components["schemas"]["Tfl.Api.Presentation.Entities.LineRouteSection"][];
      matchedRouteSections: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedRouteSections"][];
      matchedStops: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedStop"][];
      id: string;
      url: string;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.LineRouteSection": {
      /** Format: int32 */
      routeId: number;
      direction: string;
      destination: string;
      fromStation: string;
      toStation: string;
      serviceType: string;
      vehicleDestinationText: string;
    };
    "Tfl.Api.Presentation.Entities.MatchedRouteSections": {
      /** Format: int32 */
      id: number;
    };
    "Tfl.Api.Presentation.Entities.TimetableResponse": {
      lineId: string;
      lineName: string;
      direction: string;
      pdfUrl: string;
      stations: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedStop"][];
      stops: components["schemas"]["Tfl.Api.Presentation.Entities.MatchedStop"][];
      timetable: components["schemas"]["Tfl.Api.Presentation.Entities.Timetable"];
      disambiguation: components["schemas"]["Tfl.Api.Presentation.Entities.Timetables.Disambiguation"];
      statusErrorMessage: string;
    };
    "Tfl.Api.Presentation.Entities.Timetable": {
      departureStopId: string;
      routes: components["schemas"]["Tfl.Api.Presentation.Entities.TimetableRoute"][];
    };
    "Tfl.Api.Presentation.Entities.Timetables.Disambiguation": {
      disambiguationOptions: components["schemas"]["Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption"][];
    };
    "Tfl.Api.Presentation.Entities.TimetableRoute": {
      stationIntervals: components["schemas"]["Tfl.Api.Presentation.Entities.StationInterval"][];
      schedules: components["schemas"]["Tfl.Api.Presentation.Entities.Schedule"][];
    };
    "Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption": {
      description: string;
      uri: string;
    };
    "Tfl.Api.Presentation.Entities.StationInterval": {
      id: string;
      intervals: components["schemas"]["Tfl.Api.Presentation.Entities.Interval"][];
    };
    "Tfl.Api.Presentation.Entities.Schedule": {
      name: string;
      knownJourneys: components["schemas"]["Tfl.Api.Presentation.Entities.KnownJourney"][];
      firstJourney: components["schemas"]["Tfl.Api.Presentation.Entities.KnownJourney"];
      lastJourney: components["schemas"]["Tfl.Api.Presentation.Entities.KnownJourney"];
      periods: components["schemas"]["Tfl.Api.Presentation.Entities.Period"][];
    };
    "Tfl.Api.Presentation.Entities.Interval": {
      stopId: string;
      /** Format: double */
      timeToArrival: number;
    };
    "Tfl.Api.Presentation.Entities.KnownJourney": {
      hour: string;
      minute: string;
      /** Format: int32 */
      intervalId: number;
    };
    "Tfl.Api.Presentation.Entities.Period": {
      /** @enum {string} */
      type: "Normal" | "FrequencyHours" | "FrequencyMinutes" | "Unknown";
      fromTime: components["schemas"]["Tfl.Api.Presentation.Entities.TwentyFourHourClockTime"];
      toTime: components["schemas"]["Tfl.Api.Presentation.Entities.TwentyFourHourClockTime"];
      frequency: components["schemas"]["Tfl.Api.Presentation.Entities.ServiceFrequency"];
    };
    "Tfl.Api.Presentation.Entities.TwentyFourHourClockTime": {
      hour: string;
      minute: string;
    };
    "Tfl.Api.Presentation.Entities.ServiceFrequency": {
      /** Format: double */
      lowestFrequency: number;
      /** Format: double */
      highestFrequency: number;
    };
    /** @description DTO to capture the prediction details */
    "Tfl.Api.Presentation.Entities.Prediction": {
      /** @description The identitier for the prediction */
      id: string;
      /**
       * Format: int32
       * @description The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
       */
      operationType: number;
      /** @description The actual vehicle in transit (for train modes, the leading car of the rolling set) */
      vehicleId: string;
      /** @description Identifier for the prediction */
      naptanId: string;
      /** @description Station name */
      stationName: string;
      /** @description Unique identifier for the Line */
      lineId: string;
      /** @description Line Name */
      lineName: string;
      /** @description Platform name (for bus, this is the stop letter) */
      platformName: string;
      /** @description Direction (unified to inbound/outbound) */
      direction: string;
      /** @description Bearing (between 0 to 359) */
      bearing: string;
      /** @description Naptan Identifier for the prediction's destination */
      destinationNaptanId: string;
      /** @description Name of the destination */
      destinationName: string;
      /**
       * Format: date-time
       * @description Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
       */
      timestamp: string;
      /**
       * Format: int32
       * @description Prediction of the Time to station in seconds
       */
      timeToStation: number;
      /** @description The current location of the vehicle. */
      currentLocation: string;
      /** @description Routing information or other descriptive text about the path of the vehicle towards the destination */
      towards: string;
      /**
       * Format: date-time
       * @description The expected arrival time of the vehicle at the stop/station
       */
      expectedArrival: string;
      /**
       * Format: date-time
       * @description The expiry time for the prediction
       */
      timeToLive: string;
      /** @description The mode name of the station/line the prediction relates to */
      modeName: string;
      timing: components["schemas"]["Tfl.Api.Presentation.Entities.PredictionTiming"];
    };
    "Tfl.Api.Presentation.Entities.PredictionTiming": {
      countdownServerAdjustment: string;
      /** Format: date-time */
      source: string;
      /** Format: date-time */
      insert: string;
      /** Format: date-time */
      read: string;
      /** Format: date-time */
      sent: string;
      /** Format: date-time */
      received: string;
    };
    "Tfl.Api.Presentation.Entities.ActiveServiceType": {
      mode: string;
      serviceType: string;
    };
    /** @description Represent travel network status */
    "Tfl.Api.Presentation.Entities.NetworkStatus": {
      operator: string;
      status: string;
      message: string;
      /** Format: int32 */
      statusLevel: number;
    };
    "Tfl.Api.Presentation.Entities.CarParkOccupancy": {
      id: string;
      bays: components["schemas"]["Tfl.Api.Presentation.Entities.Bay"][];
      name: string;
      carParkDetailsUrl: string;
    };
    "Tfl.Api.Presentation.Entities.Bay": {
      bayType: string;
      /** Format: int32 */
      bayCount: number;
      /** Format: int32 */
      free: number;
      /** Format: int32 */
      occupied: number;
    };
    "Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy": {
      /** Format: int32 */
      id: number;
      sourceSystemPlaceId: string;
      status: string;
    };
    /** @description Bike point occupancy */
    "Tfl.Api.Presentation.Entities.BikePointOccupancy": {
      /** @description Id of the bike point such as BikePoints_1 */
      id: string;
      /** @description Name / Common name of the bike point */
      name: string;
      /**
       * Format: int32
       * @description Total bike counts
       */
      bikesCount: number;
      /**
       * Format: int32
       * @description Empty docks
       */
      emptyDocks: number;
      /**
       * Format: int32
       * @description Total docks available
       */
      totalDocks: number;
    };
    "Tfl.Api.Presentation.Entities.PlaceCategory": {
      category: string;
      availableKeys: string[];
    };
    "Tfl.Api.Presentation.Entities.SearchResponse": {
      query: string;
      /** Format: int32 */
      from: number;
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      pageSize: number;
      provider: string;
      /** Format: int32 */
      total: number;
      matches: components["schemas"]["Tfl.Api.Presentation.Entities.SearchMatch"][];
      /** Format: double */
      maxScore: number;
    };
    "Tfl.Api.Presentation.Entities.SearchMatch": {
      id: string;
      url: string;
      name: string;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl.Api.Common.PostcodeInput": {
      postcode: string;
    };
    "Tfl.Api.Presentation.Entities.PlacePolygon": {
      geoPoints: components["schemas"]["Tfl.Api.Common.GeoPoint"][];
      commonName: string;
    };
    "Tfl.Api.Common.GeoPoint": {
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl.Api.Common.PlaceGeo": {
      /** Format: double */
      swLat: number;
      /** Format: double */
      swLon: number;
      /** Format: double */
      neLat: number;
      /** Format: double */
      neLon: number;
      /** Format: double */
      lat: number;
      /** Format: double */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.RoadCorridor": {
      /** @description The Id of the Corridor e.g. "A406" */
      id: string;
      /**
       * @description The display name of the Corridor e.g. "North Circular (A406)". This
       *             may be identical to the Id.
       */
      displayName: string;
      /** @description The group name of the Corridor e.g. "Central London". Most corridors are not grouped, in which case this field can be null. */
      group: string;
      /** @description Standard multi-mode status severity code */
      statusSeverity: string;
      /** @description Description of the status severity as applied to RoadCorridors */
      statusSeverityDescription: string;
      /**
       * @description The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate
       *             pair in geoJSON format e.g. "[[-1.241531,51.242151],[1.641223,53.765721]]"
       */
      bounds: string;
      /**
       * @description The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon
       *             in geoJSON format e.g. "[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]"
       */
      envelope: string;
      /**
       * Format: date-time
       * @description The start of the period over which status has been aggregated, or null if this is the current corridor status.
       */
      statusAggregationStartDate: string;
      /**
       * Format: date-time
       * @description The end of the period over which status has been aggregated, or null if this is the current corridor status.
       */
      statusAggregationEndDate: string;
      /** @description URL to retrieve this Corridor. */
      url: string;
    };
    "Tfl.Api.Common.DateRangeNullable": {
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
    };
    "Tfl.Api.Presentation.Entities.RoadDisruption": {
      /** @description Unique identifier for the road disruption */
      id: string;
      /** @description URL to retrieve this road disruption */
      url: string;
      /** @description Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string. */
      point: string;
      /** @description A description of the severity of the disruption. */
      severity: string;
      /**
       * Format: int32
       * @description An ordinal of the disruption based on severity, level of interest and corridor.
       */
      ordinal: number;
      /** @description Describes the nature of disruption e.g. Traffic Incidents, Works */
      category: string;
      /** @description Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load */
      subCategory: string;
      /** @description Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate. */
      comments: string;
      /**
       * @description Text of the most recent update from the LSTCC on the state of the
       *              disruption, including the current traffic impact and any advice to
       *              road users.
       */
      currentUpdate: string;
      /**
       * Format: date-time
       * @description The time when the last CurrentUpdate description was recorded,
       *             or null if no CurrentUpdate has been applied.
       */
      currentUpdateDateTime: string;
      /** @description The Ids of affected corridors, if any. */
      corridorIds: string[];
      /**
       * Format: date-time
       * @description The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.
       *             For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.
       */
      startDateTime: string;
      /**
       * Format: date-time
       * @description The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned
       *             disruptions in progress, this field will be omitted.
       */
      endDateTime: string;
      /**
       * Format: date-time
       * @description The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly
       *             compare two instances of the same disruption to determine if it has been changed.
       */
      lastModifiedTime: string;
      /**
       * @description This describes the level of potential impact on traffic operations of the disruption.
       *             High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention
       *             Medium = This is the default value
       *             Low = e.g. a frequently occurring disruption which is well known
       */
      levelOfInterest: string;
      /** @description Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited. */
      location: string;
      /**
       * @description This describes the status of the disruption.
       *             Active = currently in progress
       *             Active Long Term = currently in progress and long term
       *             Scheduled = scheduled to start within the next 180 days
       *             Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.
       *             Recently Cleared = recently cleared in the last 24 hours
       *             Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.
       */
      status: string;
      geography: components["schemas"]["System.Data.Spatial.DbGeography"];
      geometry: components["schemas"]["System.Data.Spatial.DbGeography"];
      /** @description A collection of zero or more streets affected by the disruption. */
      streets: components["schemas"]["Tfl.Api.Presentation.Entities.Street"][];
      /** @description True if the disruption is planned on a future date that is open to change */
      isProvisional: boolean;
      /**
       * @description True if any of the affected Streets have a "Full Closure" status, false otherwise. A RoadDisruption that has HasClosures is considered a
       *             Severe or Serious disruption for severity filtering purposes.
       */
      hasClosures: boolean;
      /** @description The text of any associated link */
      linkText: string;
      /** @description The url of any associated link */
      linkUrl: string;
      roadProject: components["schemas"]["Tfl.Api.Presentation.Entities.RoadProject"];
      /**
       * Format: date-time
       * @description TDM Additional properties
       */
      publishStartDate: string;
      /** Format: date-time */
      publishEndDate: string;
      timeFrame: string;
      roadDisruptionLines: components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruptionLine"][];
      roadDisruptionImpactAreas: components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea"][];
      recurringSchedules: components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruptionSchedule"][];
    };
    "Tfl.Api.Presentation.Entities.Street": {
      /** @description Street name */
      name: string;
      /**
       * @description Type of road closure. Some example values:
       *             Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
       *             Partial Closure = road is partially blocked, closed or restricted.
       *             Full Closure = road is fully blocked or closed.
       */
      closure: string;
      /**
       * @description The direction of the disruption on the street. Some example values:
       *             All Directions
       *             All Approaches
       *             Clockwise
       *             Anti-Clockwise
       *             Northbound
       *             Eastbound
       *             Southbound
       *             Westbound
       *             Both Directions
       */
      directions: string;
      /** @description Geographic description of the sections of this street that are affected. */
      segments: components["schemas"]["Tfl.Api.Presentation.Entities.StreetSegment"][];
      /**
       * Format: int64
       * @description The ID from the source system of the disruption that this street belongs to.
       */
      sourceSystemId: number;
      /** @description The key of the source system of the disruption that this street belongs to. */
      sourceSystemKey: string;
    };
    "Tfl.Api.Presentation.Entities.RoadProject": {
      projectId: string;
      schemeName: string;
      projectName: string;
      projectDescription: string;
      projectPageUrl: string;
      consultationPageUrl: string;
      /** Format: date-time */
      consultationStartDate: string;
      /** Format: date-time */
      consultationEndDate: string;
      /** Format: date-time */
      constructionStartDate: string;
      /** Format: date-time */
      constructionEndDate: string;
      boroughsBenefited: string[];
      cycleSuperhighwayId: string;
      /** @enum {string} */
      phase:
        | "Unscoped"
        | "Concept"
        | "ConsultationEnded"
        | "Consultation"
        | "Construction"
        | "Complete";
      contactName: string;
      contactEmail: string;
      externalPageUrl: string;
      projectSummaryPageUrl: string;
    };
    "Tfl.Api.Presentation.Entities.RoadDisruptionLine": {
      /** Format: int32 */
      id: number;
      roadDisruptionId: string;
      isDiversion: boolean;
      multiLineString: components["schemas"]["System.Data.Spatial.DbGeography"];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      startTime: string;
      endTime: string;
    };
    "Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea": {
      /** Format: int32 */
      id: number;
      roadDisruptionId: string;
      polygon: components["schemas"]["System.Data.Spatial.DbGeography"];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      startTime: string;
      endTime: string;
    };
    "Tfl.Api.Presentation.Entities.RoadDisruptionSchedule": {
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
    };
    "Tfl.Api.Presentation.Entities.StreetSegment": {
      /** @description A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link. */
      toid: string;
      /** @description geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment. */
      lineString: string;
      /**
       * Format: int64
       * @description The ID from the source system of the disruption that this street belongs to.
       */
      sourceSystemId: number;
      /** @description The key of the source system of the disruption that this street belongs to. */
      sourceSystemKey: string;
    };
    "Tfl.Api.Presentation.Entities.Redirect": {
      shortUrl: string;
      longUrl: string;
      active: boolean;
    };
    "Tfl.Api.Presentation.Entities.StopPointCategory": {
      category: string;
      availableKeys: string[];
    };
    "Tfl.Api.Presentation.Entities.LineServiceType": {
      lineName: string;
      lineSpecificServiceTypes: components["schemas"]["Tfl.Api.Presentation.Entities.LineSpecificServiceType"][];
    };
    "Tfl.Api.Presentation.Entities.LineSpecificServiceType": {
      serviceType: components["schemas"]["Tfl.Api.Presentation.Entities.LineServiceTypeInfo"];
      stopServesServiceType: boolean;
    };
    /** @description DTO to capture the prediction details */
    "Tfl.Api.Presentation.Entities.ArrivalDeparture": {
      /** @description Platform name (for bus, this is the stop letter) */
      platformName: string;
      /** @description Naptan Identifier for the prediction's destination */
      destinationNaptanId: string;
      /** @description Name of the destination */
      destinationName: string;
      /** @description Identifier for the prediction */
      naptanId: string;
      /** @description Station name */
      stationName: string;
      /**
       * Format: date-time
       * @description Estimated time of arrival
       */
      estimatedTimeOfArrival: string;
      /**
       * Format: date-time
       * @description Estimated time of arrival
       */
      scheduledTimeOfArrival: string;
      /**
       * Format: date-time
       * @description Estimated time of arrival
       */
      estimatedTimeOfDeparture: string;
      /**
       * Format: date-time
       * @description Estimated time of arrival
       */
      scheduledTimeOfDeparture: string;
      /** @description Estimated time of arrival */
      minutesAndSecondsToArrival: string;
      /** @description Estimated time of arrival */
      minutesAndSecondsToDeparture: string;
      /** @description Reason for cancellation or delay */
      cause: string;
      /**
       * @description Status of departure
       * @enum {string}
       */
      departureStatus:
        | "OnTime"
        | "Delayed"
        | "Cancelled"
        | "NotStoppingAtStation";
      timing: components["schemas"]["Tfl.Api.Presentation.Entities.PredictionTiming"];
    };
    "Tfl.Api.Presentation.Entities.StopPointRouteSection": {
      naptanId: string;
      lineId: string;
      mode: string;
      /** Format: date-time */
      validFrom: string;
      /** Format: date-time */
      validTo: string;
      direction: string;
      routeSectionName: string;
      lineString: string;
      isActive: boolean;
      serviceType: string;
      vehicleDestinationText: string;
      destinationName: string;
    };
    "Tfl.Api.Presentation.Entities.DisruptedPoint": {
      atcoCode: string;
      /** Format: date-time */
      fromDate: string;
      /** Format: date-time */
      toDate: string;
      description: string;
      commonName: string;
      type: string;
      mode: string;
      stationAtcoCode: string;
      appearance: string;
      additionalInformation: string;
    };
    /** @description A paged response containing StopPoints */
    "Tfl.Api.Presentation.Entities.StopPointsResponse": {
      /** @description The centre latitude/longitude of this list of StopPoints */
      centrePoint: number[];
      /** @description Collection of stop points */
      stopPoints: components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
      /**
       * Format: int32
       * @description The maximum size of the page in this response i.e. the maximum number of StopPoints
       */
      pageSize: number;
      /**
       * Format: int32
       * @description The total number of StopPoints available across all pages
       */
      total: number;
      /**
       * Format: int32
       * @description The index of this page
       */
      page: number;
    };
    "Tfl.Api.Presentation.Entities.Fares.RecommendationResponse": {
      recommendations: components["schemas"]["Tfl.Api.Presentation.Entities.Fares.Recommendation"][];
    };
    "Tfl.Api.Presentation.Entities.Fares.Recommendation": {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      rule: number;
      /** Format: int32 */
      rank: number;
      fareType: string;
      product: string;
      ticketType: string;
      ticketTime: string;
      productType: string;
      discountCard: string;
      zones: string;
      cost: string;
      priceDescription: string;
      priceComparison: string;
      recommendedTopUp: string;
      notes: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
      keyFeatures: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
      gettingYourTicket: components["schemas"]["Tfl.Api.Presentation.Entities.Message"][];
      /** Format: double */
      singleFare: number;
    };
    "Tfl.Api.Presentation.Entities.VehicleMatch": {
      vrm: string;
      type: string;
      make: string;
      model: string;
      colour: string;
      /** @enum {string} */
      compliance: "NotAvailable" | "NotCompliant" | "Compliant" | "Exempt";
    };
    "Tfl.Api.Common.ApiVersionInfo": {
      label: string;
      /** Format: date-time */
      timestamp: string;
      version: string;
      assemblies: string[];
    };
    "Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray": components["schemas"]["Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail"][];
    "Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail"][];
    "Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail"][];
    "Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail"][];
    "Tfl-Api-Presentation-Entities-PlaceArray": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-ModeArray": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    LineMetaDisruptionCategoriesGet200ApplicationJsonResponse: string[];
    LineMetaDisruptionCategoriesGet200TextJsonResponse: string[];
    LineMetaDisruptionCategoriesGet200ApplicationXmlResponse: string[];
    LineMetaDisruptionCategoriesGet200TextXmlResponse: string[];
    LineMetaServiceTypesGet200ApplicationJsonResponse: string[];
    LineMetaServiceTypesGet200TextJsonResponse: string[];
    LineMetaServiceTypesGet200ApplicationXmlResponse: string[];
    LineMetaServiceTypesGet200TextXmlResponse: string[];
    "Tfl-Api-Presentation-Entities-LineArray": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-8": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-9": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-10": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-11": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-12": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-13": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-14": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-15": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-16": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-17": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-18": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-19": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-20": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-21": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-22": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-23": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-24": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-25": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-26": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-27": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-28": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-29": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-30": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-31": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-32": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-33": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-34": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-LineArray-35": components["schemas"]["Tfl.Api.Presentation.Entities.Line"][];
    "Tfl-Api-Presentation-Entities-StopPointArray": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-DisruptionArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Disruption"][];
    "Tfl-Api-Presentation-Entities-PredictionArray": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.ActiveServiceType"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-CarParkOccupancyArray": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"][];
    "Tfl-Api-Presentation-Entities-CarParkOccupancyArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"][];
    "Tfl-Api-Presentation-Entities-CarParkOccupancyArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"][];
    "Tfl-Api-Presentation-Entities-CarParkOccupancyArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy"][];
    "Tfl-Api-Presentation-Entities-BikePointOccupancyArray": components["schemas"]["Tfl.Api.Presentation.Entities.BikePointOccupancy"][];
    "Tfl-Api-Presentation-Entities-BikePointOccupancyArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.BikePointOccupancy"][];
    "Tfl-Api-Presentation-Entities-BikePointOccupancyArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.BikePointOccupancy"][];
    "Tfl-Api-Presentation-Entities-BikePointOccupancyArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.BikePointOccupancy"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceCategoryArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.PlaceCategory"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-8": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-9": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-10": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-11": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-12": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-13": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-14": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-15": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-16": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-17": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-18": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-19": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-8": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-9": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-10": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadCorridorArray-11": components["schemas"]["Tfl.Api.Presentation.Entities.RoadCorridor"][];
    "Tfl-Api-Presentation-Entities-RoadDisruptionArray": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"][];
    "Tfl-Api-Presentation-Entities-RoadDisruptionArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"][];
    "Tfl-Api-Presentation-Entities-RoadDisruptionArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"][];
    "Tfl-Api-Presentation-Entities-RoadDisruptionArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"][];
    "Tfl-Api-Presentation-Entities-RoadDisruptionArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"][];
    RoadMetaCategoriesGet200ApplicationJsonResponse: string[];
    RoadMetaCategoriesGet200TextJsonResponse: string[];
    RoadMetaCategoriesGet200ApplicationXmlResponse: string[];
    RoadMetaCategoriesGet200TextXmlResponse: string[];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    "Tfl-Api-Presentation-Entities-StatusSeverityArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.StatusSeverity"][];
    SearchMetaSearchProvidersGet200ApplicationJsonResponse: string[];
    SearchMetaSearchProvidersGet200TextJsonResponse: string[];
    SearchMetaSearchProvidersGet200ApplicationXmlResponse: string[];
    SearchMetaSearchProvidersGet200TextXmlResponse: string[];
    SearchMetaCategoriesGet200ApplicationJsonResponse: string[];
    SearchMetaCategoriesGet200TextJsonResponse: string[];
    SearchMetaCategoriesGet200ApplicationXmlResponse: string[];
    SearchMetaCategoriesGet200TextXmlResponse: string[];
    SearchMetaSortsGet200ApplicationJsonResponse: string[];
    SearchMetaSortsGet200TextJsonResponse: string[];
    SearchMetaSortsGet200ApplicationXmlResponse: string[];
    SearchMetaSortsGet200TextXmlResponse: string[];
    "Tfl-Api-Presentation-Entities-StopPointCategoryArray": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointCategory"][];
    "Tfl-Api-Presentation-Entities-StopPointCategoryArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointCategory"][];
    "Tfl-Api-Presentation-Entities-StopPointCategoryArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointCategory"][];
    "Tfl-Api-Presentation-Entities-StopPointCategoryArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointCategory"][];
    StopPointMetaStopTypesGet200ApplicationJsonResponse: string[];
    StopPointMetaStopTypesGet200TextJsonResponse: string[];
    StopPointMetaStopTypesGet200ApplicationXmlResponse: string[];
    StopPointMetaStopTypesGet200TextXmlResponse: string[];
    "Tfl-Api-Presentation-Entities-ModeArray-8": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-9": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-10": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-ModeArray-11": components["schemas"]["Tfl.Api.Presentation.Entities.Mode"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-8": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-9": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-10": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-11": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-20": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-21": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-22": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-23": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-12": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-13": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-14": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-15": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-16": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-17": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-18": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-19": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-20": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-21": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-22": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-23": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-LineServiceTypeArray": components["schemas"]["Tfl.Api.Presentation.Entities.LineServiceType"][];
    "Tfl-Api-Presentation-Entities-LineServiceTypeArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.LineServiceType"][];
    "Tfl-Api-Presentation-Entities-LineServiceTypeArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.LineServiceType"][];
    "Tfl-Api-Presentation-Entities-LineServiceTypeArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.LineServiceType"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-8": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-9": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-10": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-11": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-ArrivalDepartureArray": components["schemas"]["Tfl.Api.Presentation.Entities.ArrivalDeparture"][];
    "Tfl-Api-Presentation-Entities-ArrivalDepartureArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.ArrivalDeparture"][];
    "Tfl-Api-Presentation-Entities-ArrivalDepartureArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.ArrivalDeparture"][];
    "Tfl-Api-Presentation-Entities-ArrivalDepartureArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.ArrivalDeparture"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-24": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-25": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-26": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointArray-27": components["schemas"]["Tfl.Api.Presentation.Entities.StopPoint"][];
    "Tfl-Api-Presentation-Entities-StopPointRouteSectionArray": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointRouteSection"][];
    "Tfl-Api-Presentation-Entities-StopPointRouteSectionArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointRouteSection"][];
    "Tfl-Api-Presentation-Entities-StopPointRouteSectionArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointRouteSection"][];
    "Tfl-Api-Presentation-Entities-StopPointRouteSectionArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointRouteSection"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    "Tfl-Api-Presentation-Entities-DisruptedPointArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.DisruptedPoint"][];
    StopPointIdDirectionToToStopPointIdGet200ApplicationJsonResponse: string;
    StopPointIdDirectionToToStopPointIdGet200TextJsonResponse: string;
    StopPointIdDirectionToToStopPointIdGet200ApplicationXmlResponse: string;
    StopPointIdDirectionToToStopPointIdGet200TextXmlResponse: string;
    "Tfl-Api-Presentation-Entities-PlaceArray-24": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-25": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-26": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-27": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-28": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-29": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-30": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-31": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-12": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-13": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-14": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
    "Tfl-Api-Presentation-Entities-PredictionArray-15": components["schemas"]["Tfl.Api.Presentation.Entities.Prediction"][];
  };
}

export interface operations {
  /** Gets all accident details for accidents occuring in the specified year */
  AccidentStats_Get: {
    parameters: {
      path: {
        /** Format - int32. The year for which to filter the accidents on. */
        year: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-AccidentStats-AccidentDetailArray-3"];
        };
      };
    };
  };
  /** Gets air quality data feed */
  AirQuality_Get: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /**
   * Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
   *             numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
   */
  BikePoint_GetAll: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-3"];
        };
      };
    };
  };
  /** Gets the bike point with the given id. */
  BikePoint_Get: {
    parameters: {
      path: {
        /** A bike point id (a list of ids can be obtained from the above BikePoint call) */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
        };
      };
    };
  };
  /**
   * Search for bike stations by their name, a bike point's name often contains information about the name of the street
   *             or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
   *             or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
   */
  BikePoint_Search: {
    parameters: {
      query: {
        /** The search term e.g. "St. James" */
        query: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-7"];
        };
      };
    };
  };
  /** Gets taxis and minicabs contact information */
  Cabwise_Get: {
    parameters: {
      query: {
        /** Format - double. Latitude */
        lat: number;
        /** Format - double. Longitude */
        lon: number;
        /** Operator Type e.g Minicab, Executive, Limousine */
        optype?: string;
        /** Wheelchair accessible */
        wc?: string;
        /** Format - double. The radius of the bounding circle in metres */
        radius?: number;
        /** Trading name of operating company */
        name?: string;
        /** Format - int32. An optional parameter to limit the number of results return. Default and maximum is 20. */
        maxResults?: number;
        /** Legacy Format */
        legacyFormat?: boolean;
        /** Force Xml */
        forceXml?: boolean;
        /** Twenty Four Seven Only */
        twentyFourSevenOnly?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets a list of all of the available journey planner modes */
  Journey_Meta: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-3"];
        };
      };
    };
  };
  /** Perform a Journey Planner search from the parameters specified in simple types */
  Journey_JourneyResults: {
    parameters: {
      path: {
        /** Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). */
        from: string;
        /** Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). */
        to: string;
      };
      query: {
        /** Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). */
        via?: string;
        /** Does the journey cover stops outside London? eg. "nationalSearch=true" */
        nationalSearch?: boolean;
        /** The date must be in yyyyMMdd format */
        date?: string;
        /** The time must be in HHmm format */
        time?: string;
        /** Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving" */
        timeIs?: "Arriving" | "Departing";
        /** The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking" */
        journeyPreference?: "LeastInterchange" | "LeastTime" | "LeastWalking";
        /** The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle" */
        mode?: unknown[];
        /** The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform" */
        accessibilityPreference?: unknown[];
        /** An optional name to associate with the origin of the journey in the results. */
        fromName?: string;
        /** An optional name to associate with the destination of the journey in the results. */
        toName?: string;
        /** An optional name to associate with the via point of the journey in the results. */
        viaName?: string;
        /** The max walking time in minutes for transfer eg. "120" */
        maxTransferMinutes?: string;
        /** The max walking time in minutes for journeys eg. "120" */
        maxWalkingMinutes?: string;
        /** The walking speed. eg possible options: "slow" | "average" | "fast". */
        walkingSpeed?: "Slow" | "Average" | "Fast";
        /** The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire" */
        cyclePreference?:
          | "None"
          | "LeaveAtStation"
          | "TakeOnTransport"
          | "AllTheWay"
          | "CycleHire";
        /** Time adjustment command. eg possible options: "TripFirst" | "TripLast" */
        adjustment?: string;
        /** A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast" */
        bikeProficiency?: unknown[];
        /** Option to determine whether to return alternative cycling journey */
        alternativeCycle?: boolean;
        /** Option to determine whether to return alternative walking journey */
        alternativeWalking?: boolean;
        /** Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. */
        applyHtmlMarkup?: boolean;
        /** A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey */
        useMultiModalCall?: boolean;
        /** A boolean to indicate whether to optimize journeys using walking */
        walkingOptimization?: boolean;
        /** A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall". */
        taxiOnlyTrip?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult"];
        };
      };
    };
  };
  /** Gets a list of valid modes */
  Line_MetaModes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-7"];
        };
      };
    };
  };
  /** Gets a list of valid severity codes */
  Line_MetaSeverity: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-3"];
        };
      };
    };
  };
  /** Gets a list of valid disruption categories */
  Line_MetaDisruptionCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LineMetaDisruptionCategoriesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["LineMetaDisruptionCategoriesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["LineMetaDisruptionCategoriesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["LineMetaDisruptionCategoriesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of valid ServiceTypes to filter on */
  Line_MetaServiceTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LineMetaServiceTypesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["LineMetaServiceTypesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["LineMetaServiceTypesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["LineMetaServiceTypesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets lines that match the specified line ids. */
  Line_Get: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-3"];
        };
      };
    };
  };
  /** Gets lines that serve the given modes. */
  Line_GetByMode: {
    parameters: {
      path: {
        /** A comma-separated list of modes e.g. tube,dlr */
        modes: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-7"];
        };
      };
    };
  };
  /** Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. */
  Line_Route: {
    parameters: {
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-8"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-9"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-10"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-11"];
        };
      };
    };
  };
  /** Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. */
  Line_LineRoutesByIds: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: unknown[];
      };
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-12"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-13"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-14"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-15"];
        };
      };
    };
  };
  /** Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route */
  Line_RouteByMode: {
    parameters: {
      path: {
        /** A comma-separated list of modes e.g. tube,dlr */
        modes: unknown[];
      };
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-16"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-17"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-18"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-19"];
        };
      };
    };
  };
  /** Gets all valid routes for given line id, including the sequence of stops on each route. */
  Line_RouteSequence: {
    parameters: {
      path: {
        /** A single line id e.g. victoria */
        id: string;
        /** The direction of travel. Can be inbound or outbound. */
        direction: "inbound" | "outbound" | "all";
      };
      query: {
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
        /** That excludes crowding from line disruptions. Can be true or false. */
        excludeCrowding?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSequence"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSequence"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSequence"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSequence"];
        };
      };
    };
  };
  /** Gets the line status for given line ids during the provided dates e.g Minor Delays */
  Line_Status: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: unknown[];
        StartDate: string;
        EndDate: string;
      };
      query: {
        /** Include details of the disruptions that are causing the line status including the affected stops and routes */
        detail?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-20"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-21"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-22"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-23"];
        };
      };
    };
  };
  /** Gets the line status of for given line ids e.g Minor Delays */
  Line_StatusByIds: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: unknown[];
      };
      query: {
        /** Include details of the disruptions that are causing the line status including the affected stops and routes */
        detail?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-24"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-25"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-26"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-27"];
        };
      };
    };
  };
  /** Search for lines or routes matching the query string */
  Line_Search: {
    parameters: {
      path: {
        /** Search term e.g victoria */
        query: string;
      };
      query: {
        /** Optionally filter by the specified modes */
        modes?: unknown[];
        /** A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSearchResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSearchResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSearchResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.RouteSearchResponse"];
        };
      };
    };
  };
  /**
   * Gets the line status for all lines with a given severity
   *             A list of valid severity codes can be obtained from a call to Line/Meta/Severity
   */
  Line_StatusBySeverity: {
    parameters: {
      path: {
        /** Format - int32. The level of severity (eg: a number from 0 to 14) */
        severity: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-28"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-29"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-30"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-31"];
        };
      };
    };
  };
  /** Gets the line status of for all lines for the given modes */
  Line_StatusByMode: {
    parameters: {
      path: {
        /** A comma-separated list of modes to filter by. e.g. tube,dlr */
        modes: unknown[];
      };
      query: {
        /** Include details of the disruptions that are causing the line status including the affected stops and routes */
        detail?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-32"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-33"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-34"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineArray-35"];
        };
      };
    };
  };
  /** Gets a list of the stations that serve the given line id */
  Line_StopPoints: {
    parameters: {
      path: {
        /** A single line id e.g. victoria */
        id: string;
      };
      query: {
        /** If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned */
        tflOperatedNationalRailStationsOnly?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-3"];
        };
      };
    };
  };
  /** Gets the timetable for a specified station on the give line */
  Line_Timetable: {
    parameters: {
      path: {
        /** The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        fromStopPointId: string;
        /** A single line id e.g. victoria */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
        };
      };
    };
  };
  /** Gets the timetable for a specified station on the give line with specified destination */
  Line_TimetableTo: {
    parameters: {
      path: {
        /** The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        fromStopPointId: string;
        /** A single line id e.g. victoria */
        id: string;
        /** The destination stations's Naptan code */
        toStopPointId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.TimetableResponse"];
        };
      };
    };
  };
  /** Get disruptions for the given line ids */
  Line_Disruption: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-3"];
        };
      };
    };
  };
  /** Get disruptions for all lines of the given modes. */
  Line_DisruptionByMode: {
    parameters: {
      path: {
        /** A comma-separated list of modes e.g. tube,dlr */
        modes: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptionArray-7"];
        };
      };
    };
  };
  /** Get the list of arrival predictions for given line ids based at the given stop */
  Line_Arrivals: {
    parameters: {
      path: {
        /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
        ids: unknown[];
        /** Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        stopPointId: string;
      };
      query: {
        /** Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all */
        direction?: "inbound" | "outbound" | "all";
        /** Optional. Id of destination stop */
        destinationStationId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-3"];
        };
      };
    };
  };
  /**
   * Returns the service type active for a mode.
   *             Currently only supports tube
   */
  Mode_GetActiveServiceTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ActiveServiceTypeArray-3"];
        };
      };
    };
  };
  /** Gets the next arrival predictions for all stops of a given mode */
  Mode_Arrivals: {
    parameters: {
      path: {
        /** A mode name e.g. tube, dlr */
        mode: string;
      };
      query: {
        /** Format - int32. A number of arrivals to return for each stop, -1 to return all available. */
        count?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-7"];
        };
      };
    };
  };
  /** Gets the occupancy for a car park with a given id */
  Occupancy_GetById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.CarParkOccupancy"];
        };
      };
    };
  };
  /** Gets the occupancy for all car parks that have occupancy data */
  Occupancy_Get: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-CarParkOccupancyArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-CarParkOccupancyArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-CarParkOccupancyArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-CarParkOccupancyArray-3"];
        };
      };
    };
  };
  /** Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId) */
  Occupancy_GetChargeConnectorStatus: {
    parameters: {
      path: {
        ids: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-3"];
        };
      };
    };
  };
  /** Gets the occupancy for all charge connectors */
  Occupancy_GetAllChargeConnectorStatus: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ChargeConnectorOccupancyArray-7"];
        };
      };
    };
  };
  /** Get the occupancy for bike points. */
  Occupancy_GetBikePointsOccupancies: {
    parameters: {
      path: {
        ids: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-BikePointOccupancyArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-BikePointOccupancyArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-BikePointOccupancyArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-BikePointOccupancyArray-3"];
        };
      };
    };
  };
  /** Gets a list of all of the available place property categories and keys. */
  Place_MetaCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-3"];
        };
      };
    };
  };
  /** Gets a list of the available types of Place. */
  Place_MetaPlaceTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceCategoryArray-7"];
        };
      };
    };
  };
  /** Gets the set of streets associated with a post code. */
  Place_GetStreetsByPostCode: {
    parameters: {
      path: {
        Postcode: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets all places of a given type */
  Place_GetByType: {
    parameters: {
      path: {
        /**
         * A comma-separated list of the types to return. Max. approx 12 types.
         *             A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.
         */
        types: unknown[];
      };
      query: {
        /** An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported) */
        activeOnly?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-8"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-9"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-10"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-11"];
        };
      };
    };
  };
  /** Gets the place with the given id. */
  PlaceById: {
    parameters: {
      path: {
        /** The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids */
        id: string;
      };
      query: {
        /** Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned */
        includeChildren?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-12"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-13"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-14"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-15"];
        };
      };
    };
  };
  /**
   * Gets the places that lie within a geographic region. The geographic region of interest can either be specified
   *             by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of
   *             its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.
   *             Optionally filters on type and can strip properties for a smaller payload.
   */
  Place_GetByGeo: {
    parameters: {
      query: {
        /** Format - double. The radius of the bounding circle in metres when only lat/lon are specified. */
        radius?: number;
        /** An optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) */
        categories?: unknown[];
        /** Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned */
        includeChildren?: boolean;
        /** Place types to filter on, or null to return all types */
        type?: unknown[];
        /** An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported) */
        activeOnly?: boolean;
        /** Format - int32. If specified, limits the number of returned places equal to the given value */
        numberOfPlacesToReturn?: number;
        /** Format - double. */
        "placeGeo.swLat"?: number;
        /** Format - double. */
        "placeGeo.swLon"?: number;
        /** Format - double. */
        "placeGeo.neLat"?: number;
        /** Format - double. */
        "placeGeo.neLon"?: number;
        /** Format - double. */
        "placeGeo.lat"?: number;
        /** Format - double. */
        "placeGeo.lon"?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-7"];
        };
      };
    };
  };
  /**
   * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place
   *             must be polygonal e.g. a BoroughBoundary.
   */
  Place_GetAt: {
    parameters: {
      path: {
        /** The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) */
        type: unknown[];
        /** Format - double. */
        Lat: number;
        /** Format - double. */
        Lon: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets the place overlay for a given set of co-ordinates and a given width/height. */
  Place_GetOverlay: {
    parameters: {
      path: {
        /** The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) */
        type: unknown[];
        /** Format - int32. The zoom level */
        z: number;
        /** Format - double. */
        Lat: number;
        /** Format - double. */
        Lon: number;
        /** Format - int32. The width of the requested overlay. */
        width: number;
        /** Format - int32. The height of the requested overlay. */
        height: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets all places that matches the given query */
  Place_Search: {
    parameters: {
      query: {
        /** The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. */
        name: string;
        /** A comma-separated list of the types to return. Max. approx 12 types. */
        types?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-16"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-17"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-18"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-19"];
        };
      };
    };
  };
  /** Gets all roads managed by TfL */
  Road_Get: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-3"];
        };
      };
    };
  };
  /** Gets the road with the specified id (e.g. A1) */
  Road_GetById: {
    parameters: {
      path: {
        /** Comma-separated list of road identifiers e.g. "A406, A2" (a full list of supported road identifiers can be found at the /Road/ endpoint) */
        ids: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-7"];
        };
      };
    };
  };
  /** Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. */
  Road_Status: {
    parameters: {
      path: {
        /** Comma-separated list of road identifiers e.g. "A406, A2" or use "all" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) */
        ids: unknown[];
      };
      query: {
        /** Format - date-time (as date-time in RFC3339). */
        "dateRangeNullable.startDate"?: string;
        /** Format - date-time (as date-time in RFC3339). */
        "dateRangeNullable.endDate"?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-8"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-9"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-10"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadCorridorArray-11"];
        };
      };
    };
  };
  /** Get active disruptions, filtered by road ids */
  Road_Disruption: {
    parameters: {
      path: {
        /** Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) */
        ids: unknown[];
      };
      query: {
        /** Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets */
        stripContent?: boolean;
        /** an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint) */
        severities?: unknown[];
        /** an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint) */
        categories?: unknown[];
        /** Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal. */
        closures?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadDisruptionArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadDisruptionArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadDisruptionArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-RoadDisruptionArray-3"];
          "application/geo+json": components["schemas"]["Tfl-Api-Presentation-Entities-RoadDisruptionArray-4"];
        };
      };
    };
  };
  /** Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned. */
  Road_DisruptedStreets: {
    parameters: {
      query: {
        /** Format - date-time (as date-time in RFC3339). Optional, the start time to filter on. */
        startDate: string;
        /** Format - date-time (as date-time in RFC3339). Optional, The end time to filter on. */
        endDate: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets a list of active disruptions filtered by disruption Ids. */
  Road_DisruptionById: {
    parameters: {
      path: {
        /** Comma-separated list of disruption identifiers to filter by. */
        disruptionIds: unknown[];
      };
      query: {
        /** Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments. */
        stripContent?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"];
          "application/geo+json": components["schemas"]["Tfl.Api.Presentation.Entities.RoadDisruption"];
        };
      };
    };
  };
  /** Gets a list of valid RoadDisruption categories */
  Road_MetaCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RoadMetaCategoriesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["RoadMetaCategoriesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["RoadMetaCategoriesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["RoadMetaCategoriesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of valid RoadDisruption severity codes */
  Road_MetaSeverities: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StatusSeverityArray-7"];
        };
      };
    };
  };
  /**
   * Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size
   *             of 100. To return subsequent pages, use the paginated overload.
   */
  Search_Get: {
    parameters: {
      query: {
        /** The search query */
        query: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
        };
      };
    };
  };
  /** Searches the bus schedules folder on S3 for a given bus number. */
  Search_BusSchedules: {
    parameters: {
      query: {
        /** The search query */
        query: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
        };
      };
    };
  };
  /** Gets the available searchProvider names. */
  Search_MetaSearchProviders: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SearchMetaSearchProvidersGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["SearchMetaSearchProvidersGet200TextJsonResponse"];
          "application/xml": components["schemas"]["SearchMetaSearchProvidersGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["SearchMetaSearchProvidersGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the available search categories. */
  Search_MetaCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SearchMetaCategoriesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["SearchMetaCategoriesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["SearchMetaCategoriesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["SearchMetaCategoriesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the available sorting options. */
  Search_MetaSorts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SearchMetaSortsGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["SearchMetaSortsGet200TextJsonResponse"];
          "application/xml": components["schemas"]["SearchMetaSortsGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["SearchMetaSortsGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the list of available StopPoint additional information categories */
  StopPoint_MetaCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointCategoryArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointCategoryArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointCategoryArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointCategoryArray-3"];
        };
      };
    };
  };
  /** Gets the list of available StopPoint types */
  StopPoint_MetaStopTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StopPointMetaStopTypesGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["StopPointMetaStopTypesGet200TextJsonResponse"];
          "application/xml": components["schemas"]["StopPointMetaStopTypesGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["StopPointMetaStopTypesGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the list of available StopPoint modes */
  StopPoint_MetaModes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-8"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-9"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-10"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ModeArray-11"];
        };
      };
    };
  };
  /** Gets a list of StopPoints corresponding to the given list of stop ids. */
  StopPoint_GetById: {
    parameters: {
      path: {
        /**
         * A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.
         *             You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.
         */
        ids: unknown[];
      };
      query: {
        /** Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} */
        includeCrowdingData?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-8"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-9"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-10"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-11"];
        };
      };
    };
  };
  /** Get a list of places corresponding to a given id and place types. */
  StopPoint_Get: {
    parameters: {
      path: {
        /** A naptan id for a stop point (station naptan code e.g. 940GZZLUASL). */
        id: string;
      };
      query: {
        /** A comcomma-separated value representing the place types. */
        placeTypes: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-20"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-21"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-22"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-23"];
        };
      };
    };
  };
  /** Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. */
  StopPoint_Crowding: {
    parameters: {
      path: {
        /** The Naptan id of the stop */
        id: string;
        /** A particular line e.g. victoria, circle, northern etc. */
        line: string;
      };
      query: {
        /** The direction of travel. Can be inbound or outbound. */
        direction: "inbound" | "outbound" | "all";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-12"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-13"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-14"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-15"];
        };
      };
    };
  };
  /** Gets all stop points of a given type */
  StopPoint_GetByType: {
    parameters: {
      path: {
        /**
         * A comma-separated list of the types to return. Max. approx. 12 types.
         *             A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.
         */
        types: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-16"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-17"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-18"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-19"];
        };
      };
    };
  };
  /** Gets all the stop points of given type(s) with a page number */
  StopPoint_GetByTypeWithPagination: {
    parameters: {
      path: {
        types: unknown[];
        /** Format - int32. */
        page: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-20"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-21"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-22"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-23"];
        };
      };
    };
  };
  /** Gets the service types for a given stoppoint */
  StopPoint_GetServiceTypes: {
    parameters: {
      query: {
        /** The Naptan id of the stop */
        id: string;
        /** The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) */
        lineIds?: unknown[];
        /** The modes which the lines are relevant to (all if empty) */
        modes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineServiceTypeArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-LineServiceTypeArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineServiceTypeArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-LineServiceTypeArray-3"];
        };
      };
    };
  };
  /** Gets the list of arrival predictions for the given stop point id */
  StopPoint_Arrivals: {
    parameters: {
      path: {
        /** A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-8"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-9"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-10"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-11"];
        };
      };
    };
  };
  /** Gets the list of arrival and departure predictions for the given stop point id (overground and tfl rail only) */
  StopPoint_ArrivalDepartures: {
    parameters: {
      path: {
        /** A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        id: string;
      };
      query: {
        /** A comma-separated list of line ids e.g. tfl-rail, london-overground */
        lineIds: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-ArrivalDepartureArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-ArrivalDepartureArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ArrivalDepartureArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-ArrivalDepartureArray-3"];
        };
      };
    };
  };
  /** Gets Stopoints that are reachable from a station/line combination. */
  StopPoint_ReachableFrom: {
    parameters: {
      path: {
        /** The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by */
        id: string;
        /** Line id of the line to filter by (e.g. victoria) */
        lineId: string;
      };
      query: {
        /** A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-24"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-25"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-26"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointArray-27"];
        };
      };
    };
  };
  /** Returns the route sections for all the lines that service the given stop point ids */
  StopPoint_Route: {
    parameters: {
      path: {
        /** A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        id: string;
      };
      query: {
        /** A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified */
        serviceTypes?: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointRouteSectionArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointRouteSectionArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointRouteSectionArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-StopPointRouteSectionArray-3"];
        };
      };
    };
  };
  /** Gets a distinct list of disrupted stop points for the given modes */
  StopPoint_DisruptionByMode: {
    parameters: {
      path: {
        /** A comma-seperated list of modes e.g. tube,dlr */
        modes: unknown[];
      };
      query: {
        includeRouteBlockedStops?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-3"];
        };
      };
    };
  };
  /** Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. */
  StopPoint_Disruption: {
    parameters: {
      path: {
        /**
         * A comma-seperated list of stop point ids. Max. approx. 20 ids.
         *             You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.
         */
        ids: unknown[];
      };
      query: {
        /** Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. */
        getFamily?: boolean;
        includeRouteBlockedStops?: boolean;
        /** Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). */
        flattenResponse?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-DisruptedPointArray-7"];
        };
      };
    };
  };
  /** Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&gt; to. */
  StopPoint_Direction: {
    parameters: {
      path: {
        /** Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        id: string;
        /** Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
        toStopPointId: string;
      };
      query: {
        /** Optional line id filter e.g. victoria */
        lineId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StopPointIdDirectionToToStopPointIdGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["StopPointIdDirectionToToStopPointIdGet200TextJsonResponse"];
          "application/xml": components["schemas"]["StopPointIdDirectionToToStopPointIdGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["StopPointIdDirectionToToStopPointIdGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets a list of StopPoints within {radius} by the specified criteria */
  StopPoint_GetByGeoPoint: {
    parameters: {
      query: {
        /** a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) */
        stopTypes: unknown[];
        /** Format - double. */
        "location.lat": number;
        /** Format - double. */
        "location.lon": number;
        /** Format - int32. the radius of the bounding circle in metres (default : 200) */
        radius?: number;
        /** Re-arrange the output into a parent/child hierarchy */
        useStopPointHierarchy?: boolean;
        /** the list of modes to search (comma separated mode names e.g. tube,dlr) */
        modes?: unknown[];
        /** an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) */
        categories?: unknown[];
        /** true to return the lines that each stop point serves as a nested resource */
        returnLines?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
        };
      };
    };
  };
  /** Gets a list of StopPoints filtered by the modes available at that StopPoint. */
  StopPoint_GetByMode: {
    parameters: {
      path: {
        /** A comma-seperated list of modes e.g. tube,dlr */
        modes: unknown[];
      };
      query: {
        /** Format - int32. The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. */
        page?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.StopPointsResponse"];
        };
      };
    };
  };
  /** Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. */
  StopPoint_SearchById: {
    parameters: {
      path: {
        /** The query string, case-insensitive. Leading and trailing wildcards are applied automatically. */
        query: string;
      };
      query: {
        /** An optional, parameter separated list of the modes to filter by */
        modes?: unknown[];
        /** True to only return stations in that have Fares data available for single fares to another station. */
        faresOnly?: boolean;
        /**
         * Format - int32. An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
         *             it is possible that the flattened result set will contain more than 50 items.
         */
        maxResults?: number;
        /** An optional, parameter separated list of the lines to filter by */
        lines?: unknown[];
        /** If true, returns results including HUBs. */
        includeHubs?: boolean;
        /** If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned */
        tflOperatedNationalRailStationsOnly?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
        };
      };
    };
  };
  /** Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. */
  StopPoint_Search: {
    parameters: {
      query: {
        /** The query string, case-insensitive. Leading and trailing wildcards are applied automatically. */
        query: string;
        /** An optional, parameter separated list of the modes to filter by */
        modes?: unknown[];
        /** True to only return stations in that have Fares data available for single fares to another station. */
        faresOnly?: boolean;
        /**
         * Format - int32. An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
         *             it is possible that the flattened result set will contain more than 50 items.
         */
        maxResults?: number;
        /** An optional, parameter separated list of the lines to filter by */
        lines?: unknown[];
        /** If true, returns results including HUBs. */
        includeHubs?: boolean;
        /** If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned */
        tflOperatedNationalRailStationsOnly?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.SearchResponse"];
        };
      };
    };
  };
  /** Gets a StopPoint for a given sms code. */
  StopPoint_GetBySms: {
    parameters: {
      path: {
        /** A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. */
        id: string;
      };
      query: {
        /** If set to "web", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. */
        output?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets a list of taxi ranks corresponding to the given stop point id. */
  StopPoint_GetTaxiRanksByIds: {
    parameters: {
      path: {
        /** stopPointId is required to get the taxi ranks. */
        stopPointId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-24"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-25"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-26"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-27"];
        };
      };
    };
  };
  /** Get car parks corresponding to the given stop point id. */
  StopPoint_GetCarParksById: {
    parameters: {
      path: {
        /** stopPointId is required to get the car parks. */
        stopPointId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-28"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-29"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-30"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-31"];
        };
      };
    };
  };
  /** Gets the TravelTime overlay. */
  TravelTime_GetOverlay: {
    parameters: {
      path: {
        /** Format - int32. The zoom level. */
        z: number;
        /** Format - double. The latitude of the pin. */
        pinLat: number;
        /** Format - double. The longitude of the pin. */
        pinLon: number;
        /** Format - double. The map center latitude. */
        mapCenterLat: number;
        /** Format - double. The map center longitude. */
        mapCenterLon: number;
        /** Format - int32. The width of the requested overlay. */
        width: number;
        /** Format - int32. The height of the requested overlay. */
        height: number;
      };
      query: {
        /** The title of the scenario. */
        scenarioTitle: string;
        /** The id for the time of day (AM/INTER/PM) */
        timeOfDayId: string;
        /** The id of the mode. */
        modeId: string;
        /** The direction of travel. */
        direction: "Average" | "From" | "To";
        /** Format - int32. The total minutes between the travel time bands */
        travelTimeInterval: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets the TravelTime overlay. */
  TravelTime_GetCompareOverlay: {
    parameters: {
      path: {
        /** Format - int32. The zoom level. */
        z: number;
        /** Format - double. The latitude of the pin. */
        pinLat: number;
        /** Format - double. The longitude of the pin. */
        pinLon: number;
        /** Format - double. The map center latitude. */
        mapCenterLat: number;
        /** Format - double. The map center longitude. */
        mapCenterLon: number;
        /** Format - int32. The width of the requested overlay. */
        width: number;
        /** Format - int32. The height of the requested overlay. */
        height: number;
      };
      query: {
        /** The title of the scenario. */
        scenarioTitle: string;
        /** The id for the time of day (AM/INTER/PM) */
        timeOfDayId: string;
        /** The id of the mode. */
        modeId: string;
        /** The direction of travel. */
        direction: "Average" | "From" | "To";
        /** Format - int32. The total minutes between the travel time bands */
        travelTimeInterval: number;
        compareType: string;
        compareValue: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["System.Object"];
          "text/json": components["schemas"]["System.Object"];
          "application/xml": components["schemas"]["System.Object"];
          "text/xml": components["schemas"]["System.Object"];
        };
      };
    };
  };
  /** Gets the predictions for a given list of vehicle Id's. */
  Vehicle_Get: {
    parameters: {
      path: {
        /** A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. */
        ids: unknown[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-12"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-13"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-14"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PredictionArray-15"];
        };
      };
    };
  };
  /** Gets the Emissions Surcharge compliance for the Vehicle */
  Vehicle_GetEmissionsSurchargeCompliance: {
    parameters: {
      query: {
        /** The Vehicle Registration Mark */
        vrm: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
        };
      };
    };
  };
  /** Gets the Ulez Surcharge compliance for the Vehicle */
  Vehicle_GetUlezCompliance: {
    parameters: {
      query: {
        /** The Vehicle Registration Mark */
        vrm: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.VehicleMatch"];
        };
      };
    };
  };
  /** GET All */
  wildcard: {
    responses: {
      200: unknown;
    };
  };
}

export interface external {}
