/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /**
     * Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
     *             numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
     */
    get: operations["BikePoint_GetAll"];
  };
  "/{id}": {
    /** Gets the bike point with the given id. */
    get: operations["BikePoint_Get"];
  };
  "/Search": {
    /**
     * Search for bike stations by their name, a bike point's name often contains information about the name of the street
     *             or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
     *             or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
     */
    get: operations["BikePoint_Search"];
  };
}

export interface components {
  schemas: {
    "Tfl-Api-Presentation-Entities-PlaceArray": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl.Api.Presentation.Entities.Place": {
      /** @description A unique identifier. */
      id: string;
      /** @description The unique location of this resource. */
      url: string;
      /** @description A human readable name. */
      commonName: string;
      /**
       * Format: double
       * @description The distance of the place from its search point, if this is the result
       *             of a geographical search, otherwise zero.
       */
      distance: number;
      /** @description The type of Place. See /Place/Meta/placeTypes for possible values. */
      placeType: string;
      /** @description A bag of additional key/value pairs with extra information about this place. */
      additionalProperties: components["schemas"]["Tfl.Api.Presentation.Entities.AdditionalProperties"][];
      children: components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
      childrenUrls: string[];
      /**
       * Format: double
       * @description WGS84 latitude of the location.
       */
      lat: number;
      /**
       * Format: double
       * @description WGS84 longitude of the location.
       */
      lon: number;
    };
    "Tfl.Api.Presentation.Entities.AdditionalProperties": {
      category: string;
      key: string;
      sourceSystemKey: string;
      value: string;
      /** Format: date-time */
      modified: string;
    };
    "Tfl-Api-Presentation-Entities-PlaceArray-1": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-2": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-3": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-4": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-5": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-6": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
    "Tfl-Api-Presentation-Entities-PlaceArray-7": components["schemas"]["Tfl.Api.Presentation.Entities.Place"][];
  };
}

export interface operations {
  /**
   * Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
   *             numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
   */
  BikePoint_GetAll: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-1"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-2"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-3"];
        };
      };
    };
  };
  /** Gets the bike point with the given id. */
  BikePoint_Get: {
    parameters: {
      path: {
        /** A bike point id (a list of ids can be obtained from the above BikePoint call) */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
          "text/json": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
          "application/xml": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
          "text/xml": components["schemas"]["Tfl.Api.Presentation.Entities.Place"];
        };
      };
    };
  };
  /**
   * Search for bike stations by their name, a bike point's name often contains information about the name of the street
   *             or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
   *             or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.
   */
  BikePoint_Search: {
    parameters: {
      query: {
        /** The search term e.g. "St. James" */
        query: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-4"];
          "text/json": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-5"];
          "application/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-6"];
          "text/xml": components["schemas"]["Tfl-Api-Presentation-Entities-PlaceArray-7"];
        };
      };
    };
  };
}

export interface external {}
