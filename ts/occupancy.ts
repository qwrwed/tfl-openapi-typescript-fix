/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/CarPark": {
    /** Gets the occupancy for all car parks that have occupancy data */
    get: operations["Occupancy_Get"];
  };
  "/ChargeConnector": {
    /** Gets the occupancy for all charge connectors */
    get: operations["Occupancy_GetAllChargeConnectorStatus"];
  };
  "/CarPark/{id}": {
    /** Gets the occupancy for a car park with a given id */
    get: operations["Occupancy_GetByPathId"];
  };
  "/ChargeConnector/{ids}": {
    /** Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId) */
    get: operations["Occupancy_GetChargeConnectorStatusByPathIds"];
  };
  "/BikePoints/{ids}": {
    /** Get the occupancy for bike points. */
    get: operations["Occupancy_GetBikePointsOccupanciesByPathIds"];
  };
}

export interface components {
  schemas: {
    Tfl: {
      bayType: string;
      /** Format: int32 */
      bayCount: number;
      /** Format: int32 */
      free: number;
      /** Format: int32 */
      occupied: number;
    };
    "Tfl-2": {
      id: string;
      bays: components["schemas"]["Tfl"][];
      name: string;
      carParkDetailsUrl: string;
    };
    "Tfl-3": {
      /** Format: int32 */
      id: number;
      sourceSystemPlaceId: string;
      status: string;
    };
    /** @description Bike point occupancy */
    "Tfl-4": {
      /** @description Id of the bike point such as BikePoints_1 */
      id: string;
      /** @description Name / Common name of the bike point */
      name: string;
      /**
       * Format: int32
       * @description Total bike counts
       */
      bikesCount: number;
      /**
       * Format: int32
       * @description Empty docks
       */
      emptyDocks: number;
      /**
       * Format: int32
       * @description Total docks available
       */
      totalDocks: number;
    };
    CarParkGet200ApplicationJsonResponse: components["schemas"]["Tfl-2"][];
    CarParkGet200TextJsonResponse: components["schemas"]["Tfl-2"][];
    CarParkGet200ApplicationXmlResponse: components["schemas"]["Tfl-2"][];
    CarParkGet200TextXmlResponse: components["schemas"]["Tfl-2"][];
    "ChargeConnector-ids-Get200ApplicationJsonResponse": components["schemas"]["Tfl-3"][];
    "ChargeConnector-ids-Get200TextJsonResponse": components["schemas"]["Tfl-3"][];
    "ChargeConnector-ids-Get200ApplicationXmlResponse": components["schemas"]["Tfl-3"][];
    "ChargeConnector-ids-Get200TextXmlResponse": components["schemas"]["Tfl-3"][];
    ChargeConnectorGet200ApplicationJsonResponse: components["schemas"]["Tfl-3"][];
    ChargeConnectorGet200TextJsonResponse: components["schemas"]["Tfl-3"][];
    ChargeConnectorGet200ApplicationXmlResponse: components["schemas"]["Tfl-3"][];
    ChargeConnectorGet200TextXmlResponse: components["schemas"]["Tfl-3"][];
    "BikePoints-ids-Get200ApplicationJsonResponse": components["schemas"]["Tfl-4"][];
    "BikePoints-ids-Get200TextJsonResponse": components["schemas"]["Tfl-4"][];
    "BikePoints-ids-Get200ApplicationXmlResponse": components["schemas"]["Tfl-4"][];
    "BikePoints-ids-Get200TextXmlResponse": components["schemas"]["Tfl-4"][];
  };
}

export interface operations {
  /** Gets the occupancy for all car parks that have occupancy data */
  Occupancy_Get: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CarParkGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["CarParkGet200TextJsonResponse"];
          "application/xml": components["schemas"]["CarParkGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["CarParkGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the occupancy for all charge connectors */
  Occupancy_GetAllChargeConnectorStatus: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChargeConnectorGet200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ChargeConnectorGet200TextJsonResponse"];
          "application/xml": components["schemas"]["ChargeConnectorGet200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ChargeConnectorGet200TextXmlResponse"];
        };
      };
    };
  };
  /** Gets the occupancy for a car park with a given id */
  Occupancy_GetByPathId: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tfl-2"];
          "text/json": components["schemas"]["Tfl-2"];
          "application/xml": components["schemas"]["Tfl-2"];
          "text/xml": components["schemas"]["Tfl-2"];
        };
      };
    };
  };
  /** Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId) */
  Occupancy_GetChargeConnectorStatusByPathIds: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChargeConnector-ids-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["ChargeConnector-ids-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["ChargeConnector-ids-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["ChargeConnector-ids-Get200TextXmlResponse"];
        };
      };
    };
  };
  /** Get the occupancy for bike points. */
  Occupancy_GetBikePointsOccupanciesByPathIds: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BikePoints-ids-Get200ApplicationJsonResponse"];
          "text/json": components["schemas"]["BikePoints-ids-Get200TextJsonResponse"];
          "application/xml": components["schemas"]["BikePoints-ids-Get200ApplicationXmlResponse"];
          "text/xml": components["schemas"]["BikePoints-ids-Get200TextXmlResponse"];
        };
      };
    };
  };
}

export interface external {}
